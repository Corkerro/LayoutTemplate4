(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
const data = /* @__PURE__ */ JSON.parse(`[{"filename":"forwhat.html","title":"Навіщо потрібні «Чертоги Фрілансера» 4? Презентація шаблону та його можливості","cover":"forwhat.jpg","date":"10.04.2025","prev":"Привіт! Це Фрілансер по життю і я радий представити вам свій стартовий шаблон для комфортної розробки сайтів «Чертоги Фрілансера» 4 (далі ЧФ4) Слово \\"чертоги\\" означає палац, замок, хороми. Назва походить від стійкого виразу \\"Чертоги розуму\\", як місце для зберігання чогось важливого.","content":"<div class=\\"content\\"><p>Привіт! Це Фрілансер по життю і я радий представити вам свій стартовий шаблон для комфортної розробки сайтів «Чертоги Фрілансера» 4 (далі ЧФ4)</p><blockquote><p>Слово \\"чертоги\\" означає палац, замок, хороми. Назва походить від стійкого виразу \\"Чертоги розуму\\", як місце для зберігання чогось важливого.</p></blockquote><p><a href=\\"download.html\\">Завантажити \\"Чертоги Фрілансера\\" 4</a></p><h3>Що таке стартовий шаблон (збірка) і для чого він потрібний?</h3><p>Давайте уявімо звичайний процес підготовки до верстки/розробці сайту. Ми створюємо ієрархію папок та файлів, налаштовуємо той чи інший збирач проекту, підключаємо основні JS-доповнення для роботи тощо.</p><p>А під час розробки, щоразу виконуємо одні й ті самі дії: конвертуємо шрифти, оптимізуємо картинки, пишемо один і той же код для вирішення стандартних завдань. Адже меню-бургер, слайдери, попапи, таби, валідація та відправлення форм, спойлери, галереї тощо давно стали невід'ємними частинами будь-якого сучасного сайту.</p><p>Крім стандартного функціоналу, нам час від часу необхідно вирішувати як складніші завдання пов'язані з хотелками дизайнера/замовника, так і допрацьовувати стандартні модулі під конкретні потреби.</p><blockquote><p>Так ось, я більше 10 років розробляю сайти на фрілансі і встиг попрацювати з найрізноманітнішими дазайн-макетами, а також з багатьма замовниками та їхніми забаганками.</p></blockquote><p>У міру вирішення завдань я всіляко намагався оптимізувати і автоматизувати рутинні процеси. А найпотрібніші та вдалі HTML/CSS/JS рішення складати у свої чертоги.</p><p>Поряд із стандартним функціоналом стали з'являтися і власні розробки та рішення. Наприклад чуйна властивість, динамічний адаптив и т.п.</p><p>В результаті, за стільки років добра накопичилося достатньо для того, щоб розробка з використанням ЧФ перетворилася на суцільне задоволення.</p><p>Зручна архітектура папок та файлів, автоматизація всіх рутинних процесів, не лише стандартний JS-функціонал, а й рішення, що дозволяють задовольнити кастомні, унікальні запити. При цьому, ніякого зайвого коду, підключається тільки потрібний функціонал для конкретних сторінок проекту, що робить результат розробки з ЧФ4 максимально оптимізованим і швидким.</p><p>Відповідаючи на запитання, що таке стартовий шаблон і навіщо він потрібен, я наведу три основні пункти:</p><ul><li><p>Стартовий шаблон \\"Чертоги Фрілансера\\" 4 - це сукупність оптимізації та автоматизації рутинних процесів під час розробки сайтів. База великої кількості як стандартних так і унікальних рішень, які допоможуть вирішити безліч завдань, що виникають за лічені секунди.</p></li><li><p>ЧФ розроблений так, щоб не притупляти ваші навички у розробці. Знайдено баланс між готовими рішеннями та повним розумінням користувачем шаблону того, як усе влаштовано \\"під капотом\\". Також вкрай докладне коментування коду робить із ЧФ навчальний інструмент для розвитку вас як спеціалістів.</p></li><li><p><strong>Шаблон \\"Чортоги Фрілансера\\" – працює з розробником, а не замість нього!</strong></p></li></ul><h3>Загальні можливості \\"Чертогів Фрілансера\\" 4</h3><p>Основна концепція ЧФ4 - це максимум функціоналу при якомога меньших діях зі сторони користувача. В новій версії я намагався автоматизувати все що тільки можна, щоб дати можливість розробнику(ці) зусередитись на самій розробці. При цьому з можливістю налаштування збірки під конкретні потреби.</p><p>ЧФ4 вміє сам налаштовувати редактор коду VS Code додаючи спіпети та налаштування псевдонімів, конвертує та підключає шрифти, конвертує та оптимізує зображення, створює іконковий шрифт та SVG-спрайт, встановлює та налаштовує CMS WordPress та дає можливість розробляти на реальній системі використовуючи усі можливості збірки. <br><br>В ЧФ4 інтегрована \\"горяча\\" підключка HTML/SCSS/JS компонентів, обробка препроцесорів SASS/SCSS та PUG, широкі можливості роботи з HTML, оптимізація та розділення фінальних JS/CSS файлів по сторінкам та створення їх нестиснутих версій, а також можливість вбудовувати критичні CSS-стилі для найкращої оптимізації.</p><p>Можливість роботи з React, Vue, Tailwindcss</p><p>Після розробки є можливість створити сторінку проєкту з посиланнями на усі сторінки, зробити ZIP-архів результату, відправити його на віддалений сервер по FTP.<br><br>ЧФ4 навіть може нагадувати, що пора зробити перерву і відпочити ❤️</p><p>Детальний опис кожного функціоналу, його налаштування та інструкції з використання ви знайдете на окремих сторінках документації ЧФ4</p><h3>Інструмент для збірки проєкту</h3><p>\\"Чертоги Фрілансера\\" 4 побудовані на основі сучасної системи для збірки проєктів <a href=\\"https://vite.dev/\\">Vite</a> (віт), яка забеспечує неймовірну швидкість враховуючи кількість функционалу.</p><h3>Компонентний підхід до усього</h3><p>Кожна частина інтерфейсу, кожен окремий ефект, кожен окремий функціонал структурно відокремлений в папку з власними HTML/SCSS/JS файлами, та за потреби міттєво підключається в проєкт при використанні.</p><p>Система глобального логінгу (Full Logging System или FLS)</p><p>Я подумав, чому б не навчити функціонал ЧФ4 \\"спілкуватися\\" (звітувати) про свою роботу користувачеві в консолі? Це дуже зручно в процесі розробки та має навчальний ефект. Звісно, цього помічника можна вимкнути як в режимі розробки так і в режимі продакшн.</p><blockquote><p>Список постійно поповнюватиметься новими можливостями. Слідкуйте за оновленнями.<br>Дякую за підтримку каналу <a href=\\"https://www.youtube.com/c/freelancerlifestyle\\">\\"Фрілансер по життю\\"</a> та безкоштовного навчального контенту!</p></blockquote><p><a href=\\"download.html\\">Завантажити \\"Чертоги Фрілансера\\" 4</a></p><p>🤟 Навчайся розвивайся та пам'ятай - живи, а працюй у вільний час!</p></div>"},{"filename":"download.html","title":"Завантажити «Чертоги Фрілансера» 4","cover":"download.jpg","date":"10.04.2025","prev":"Друзі, представляю вам \\"Чертоги Фрілансера\\" 4 (vite+docker) Завантажити архів останьої версії \\"Чертоги Фрілансера\\" 4 ви можете натиснувши на прікріплений файл внизу цієї статті Правила використання: Стартовий шаблон \\"Чертоги Фрілансера\\" 4 надається в знак вд","content":"<div class=\\"content\\"><p>Друзі, представляю вам \\"Чертоги Фрілансера\\" 4 (vite+docker)</p><a href=\\"files/flsStart4.zip\\" download=\\"flsStart4.zip\\">flsStart4.zip</a><blockquote><p><strong>Завантажити архів останьої версії \\"Чертоги Фрілансера\\" 4 ви можете натиснувши на прікріплений файл внизу цієї статті</strong> </p></blockquote><h3>Правила використання:</h3><ul><li><p>Стартовий шаблон \\"Чертоги Фрілансера\\" 4 надається в знак вдячності за благодійну підтримку каналу \\"Фрілансер по життю\\" на патреоні</p></li><li><p>Збірку, або її частини заборонено продавати у будь-якому вигляді</p></li><li><p>Збірку заборонено виставляти у відкритий доступ</p></li><li><p>Збірку можна використовувати для власних цілей в тому числі для розробки комерційних проєктів</p></li><li><p>Збірку заборонено використовувати в росії</p></li></ul><p><strong>Документація збірки (доповнюється)</strong>: <a href=\\"https://www.patreon.com/collection/1439491?view=condensed\\">https://www.patreon.com/collection/1439491?view=condensed</a><br><strong>Оновлення</strong> <strong>збірки:</strong> <a href=\\"update.html\\">update.html</a></p><h3>При винекненні питань та пропозицій пишіть у чат патронів у дискорді!</h3><p>Для додавання у <strong>закритий чат патронів</strong> виконайте інструкцію:</p><ul><li><p>Зареєструватись (<a href=\\"https://discord.com\\">https://discord.com</a>) у дискорд (це&nbsp; месенджер де знаходиться чат)</p></li><li><p>На &nbsp;патреон-сторінці &nbsp;\\"Фрілансер по життю\\" натиснути на&nbsp; вкладку \\"Моя &nbsp;підписка\\" (<a href=\\"https://www.patreon.com/freelancerlifestyle/membership).\\">https://www.patreon.com/freelancerlifestyle/membership).</a></p></li><li><p>Перейшовши, пролиснути нижче та знайти розділ \\"Спільнота Discord\\", де є кнопка \\"Підключити Discord\\",</p></li><li><p>Натиснувши яку, відбувається підключення вас до чату&nbsp; \\"Патронес\\".</p></li><li><p>Після цього чат \\"Патронес\\" з'явиться у вашому дискорді.</p></li></ul><h3>Загальний перелік функціоналу самої збірки без урахування готових JS/SCSS рішень:</h3><p>▶️ Компонентна система з \\"гарячою\\" підключкою модулів<br>▶️ Можливість розробляти під CMS WordPress (Локальний сервер Docker)<br>▶️ Конвертація та підключення локальних шрифтів<br>▶️ Конвертация та підключення WEBP/AVIF зображень з широким функціоналом<br>▶️ Можливість розбиття JS / CSS файлів по сторінках та створення нестиснутих версій<br>▶️ Можливість використання PHP рішень, таких як PHPMailer прямо на локальному сервері<br>▶️ Створення критичних CSS стилів<br>▶️ Навігаційна панель по сторінках проєкту<br>▶️ Можливість використання REACT, VUE, Tailwindcss<br>▶️ Автоматичне налаштування редактора VS Code - сніпети, аліаси<br>▶️ Створення ZIP архіву, та відправка по FTP<br>▶️ Та багато іншого</p><p>❤️Дякую за підтримку каналу</p><a href=\\"files/flsStart4.zip\\" download=\\"flsStart4.zip\\">flsStart4.zip</a></div>"},{"filename":"update.html","title":"Оновлення «Чертоги Фрілансера» 4","cover":"update.jpg","date":"10.04.2025","prev":"На цій сторінці буду публіковати інформацію щодо оновлення \\"Чертогів Фрілансера\\" 4 (ЧФ4), також буде приходити повідомлення на пошту Завантажити \\"Чертоги Фрілансера\\" 4 [23/04/2025] Оновлення Ім'я архіву ЧФ4 тепер має дату та час створення","content":"<div class=\\"content\\"><p>На цій сторінці буду публіковати інформацію щодо оновлення \\"Чертогів Фрілансера\\" 4 (ЧФ4), також буде приходити повідомлення на пошту</p><p><a href=\\"download.html\\">Завантажити \\"Чертоги Фрілансера\\" 4</a></p><p><strong>[23/04/2025] Оновлення</strong></p><ul><li><p>Ім'я архіву ЧФ4 тепер має дату та час створення</p></li><li><p>Допрацьована оптимізація SVG-іконок</p></li><li><p>Доданий компонент \\"Кошик\\"</p></li><li><p>Додана документація</p></li></ul><p><strong>[21/04/2025] Оновлення</strong></p><ul><li><p>Виправлення помилки \\"Динамічного адаптиву\\" при збірці проєкту</p></li><li><p>Дрібні покращення різних елементів та налаштувань</p></li><li><p>Додана документація</p></li></ul><p><strong>[20/04/2025] Оновлення</strong></p><ul><li><p>Дрібні покращення різних елементів та налаштувань</p></li><li><p>Додана документація</p></li></ul><p><strong>[15/04/2025] Оновлення</strong></p><ul><li><p>Виправлення помилки формування кінцевих файлів при збірці для CMS WodPress</p></li><li><p>Додана можливість швидкого створення <a href=\\"components.html\\"> власних компонентів</a> командою в терміналі</p></li><li><p>Додана документація</p></li></ul><p><strong>[14/04/2025] Оновлення</strong></p><ul><li><p>Виправлення помилки обробки вкладених зображень</p></li><li><p>Виправлення помилки шляху завантажених відалених шрифтів</p></li><li><p>Додана документація</p></li></ul><p><strong>[13/04/2025] Оновлення</strong></p><ul><li><p>Покращена обробка імен шрифтів</p></li><li><p>Додана оптимізація та чистка SVG-іконок для спрайту</p></li><li><p>Додана документація</p></li></ul><p><strong>[12/04/2025] Оновлення</strong></p><ul><li><p>Виправлення помилки при збірці сату на WordPress</p></li><li><p>Додана документація</p></li></ul><p><strong>[11/04/2025] Оновлення</strong></p><ul><li><p>Додана можливість створення копій зображеннь та інтеграція в HTML під різні DPI екранів</p></li><li><p>Додана документація щодо роботи з зображеннями, оновленна стаття про налаштування ЧФ4</p></li></ul><p><strong>[10/04/2025] Реліз</strong></p><ul><li><p><a href=\\"download.html\\">Реліз \\"Чертоги Фрілансера\\" 4</a></p></li></ul></div>"},{"filename":"install.html","title":"Встановлення та запуск «Чертогів Фрілансера» 4. Підготовка до роботи","cover":"install.jpg","date":"10.04.2025","prev":"Отже, ви завантажили шаблон \\"Чертоги Фрілансера\\" 4 (далі ЧФ4), які далі кроки? Встановлення шаблону Насамперед слід розархівувати zip-архів у вашу папку проекту. Слідкуйте за тим, щоб папка та її батьківські папки не містили в назві кирилицю, пробіли, символи # та !","content":"<div class=\\"content\\"><p>Отже, ви завантажили шаблон \\"Чертоги Фрілансера\\" 4 (далі ЧФ4), які далі кроки?</p><h3>Встановлення шаблону</h3><p>Насамперед слід розархівувати zip-архів у вашу папку проекту. Слідкуйте за тим, щоб папка та її батьківські папки не містили в назві кирилицю, пробіли, символи # та !</p><p><img src=\\"https://c10.patreonusercontent.com/4/patreon-media/p/post/126343013/73b45398da444571ac72c131299d41ba/eyJ3Ijo4MjB9/1.png?token-time=1746748800&amp;token-hash=164tDQmn41S-oQLqrzaz0g9iR9peH_kp_iOhS_r1_8o%3D\\">Вміст архіву в папці проекту</p><p>Якщо ви до цього моменту не користувалися NodeJS та пакетним менеджером NPM, слід <a href=\\"https://nodejs.org/en/download\\">завантажити та встановити Node.js</a>. Завантажуйте версію рекомендовану для більшості.</p><p>Далі відкриваємо термінал у цій папці проекту. Термінал може бути вбудований або відкритий окремо від редактора. Рекомендую використовувати термінал <a href=\\"https://git-scm.com/downloads\\">GIT Bash</a>.</p><p>Після завершення встановлення необхідних інструментів введіть команду <strong>npm i</strong></p><blockquote><p>У процесі установки в терміналі можуть бути повідомлення з позначкою WARN жовтим кольором. Ці повідомлення можна ігнорувати. Але якщо ви отримуєте повідомлення ERR! червоним кольором — це критична помилка та її потрібно виправляти.</p></blockquote><p><img src=\\"https://c10.patreonusercontent.com/4/patreon-media/p/post/126343013/ca0dd16d614d4f76bcc2a53d31850a65/eyJ3Ijo4MjB9/1.png?token-time=1746748800&amp;token-hash=lCYfhQ1i8eHHaZSZF2D1ZgQk7Ks8RsMpI64GrafveuM%3D\\">Попередження можна ігнорувати</p><p>Після успішного встановлення, у вас з'явиться папка <strong>node_modules</strong> та файл <strong>package-lock.json</strong></p><p><img src=\\"https://c10.patreonusercontent.com/4/patreon-media/p/post/126343013/4c0d5587c15b4a39bd57bda4ec0865e0/eyJ3Ijo4MjB9/1.png?token-time=1746748800&amp;token-hash=jbG8x6ZBKxv5_mPR-7kBrBHoUEU719nS15txW8IbwFQ%3D\\">Встановлення завершено</p><p>Детальніше про <a href=\\"architecture.html\\">архітектуру папок та файлів</a> ЧФ ми поговоримо в наступному розділі, а поки що продовжуємо підготовку до роботи</p><h3>Запуск шаблону та режими роботи</h3><p>ЧФ4 може виконувати різні сценарії сценаріїв:</p><ul><li><p>Режим розробника. Команда запуску <strong>npm run dev</strong></p></li><li><p>Режим розробника з зовнішнім IP. Команда запуску <strong>npm run online</strong></p></li><li><p>Режим продакшену. Команда запуску <strong>npm run build</strong></p></li><li><p>Режим перегляду результату виконання продакшену. Команда запуску <strong>npm run preview</strong></p></li><li><p>Режим продакшена та надсилання результату на сервер по FTP. Команда запуску <strong>npm run deploy</strong></p></li><li><p>Режим продакшена та створення ZIP-архіву з результатом. Команда запуску <strong>npm run zip</strong></p></li><li><p>Режим розробника під CMS WordPress. Команда запуску <strong>npm run wp</strong></p></li><li><p>Режим продакшена під CMS WordPress. Команда запуску <strong>npm run wpbuild</strong></p></li><li><p>Зупинка Docker-серверу. Команда запуску <strong>npm run wpstop</strong></p></li></ul><p>Режим розробника</p><p>У режимі розробника виконуються лише необхідні для розробки завдання:</p><ul><li><p>Конвертація OTF/TTF шрифтів у WOFF2 та підключення до проєкту</p></li><li><p>Створення іконкового шрифту та підключення до проєкту</p></li><li><p>Опрацювання HTML-файлів, перейменування псевдонімів</p></li><li><p>Опрацювання препроцесора PUG, перейменування псевдонімів</p></li><li><p>Опрацювання JS-файлів</p></li><li><p>Опрацювання SCSS/CSS-файлів</p></li><li><p>Запускається локальний сервер, відкривається браузер з індексною сторінкою.</p></li><li><p>Запускається спостерігач за зміною фалів. При кожній зміні файлів браузер оновлює сторінку</p></li><li><p>Увага! В режимі розробника HTML CSS JS файли результату не записуються на диск (<strong>папка dist не створюється</strong>).</p></li></ul><p>Режим продакшену</p><p>У режимі продакшену виконується фіналізація проекту, а саме:</p><ul><li><p>Конвертація (за потреби) OTF/TTF шрифтів у WOFF2 та підключення до проєкту</p></li><li><p>Конвертація зображень у WEBP/AVIF формат. Створення файлів різних розмірів. Стиснення та оптимізація JPG PNG SVG зображень</p></li><li><p>Конвертація SCSS файлів у CSS файли, перейменування псевдонімів, групування медіа-запитів, додаються вендорні префікси для забезпечення кросбраузерності, обробляється підключення WEBP/AVIF зображень, проводиться стиснення. Можуть створюватись нестиснуті копії файлів. Можуть створюватись критичні стилі.</p></li><li><p>Обробка та форматування HTML файлів, перейменування псевдонімів, обробляється підключення WEBP/AVIF зображень та різних розмірів файлів.</p></li><li><p>При використанні PUG, файли перетворюються на HTML, перейменовуються псевдоніми, обробляється підключення WEBP/AVIF зображень та різних розмірів файлів.</p></li><li><p>Збираються JS файли, проводиться стиснення та оптимізація кінцевого файла. У результат потрапляє лише використовуваний код. Можуть створюватись нестиснуті копії файлів.</p></li><li><p>Копіюються файли із зазначеної папки</p></li><li><p>Увага! Всі файли з результатом записуються на диск до папки <strong>dist</strong>, локальний сервер не запускається</p></li></ul><blockquote><p>Отже, давайте запустимо наш шаблон в режимі розробника, для цього в терміналі виконуємо команду <strong>npm run dev</strong></p></blockquote><p>Після запуску система виконає всі завдання режиму розробника, описані вище. Результатом роботи має стати відкрита у браузері сторінка змісту.</p><blockquote><p>Увага! При конвертації шрифтів в терміналі буде виведено відповідне повідомлення, користуватись збіркою можна буде після завершення конвертації</p></blockquote><p><img src=\\"https://c10.patreonusercontent.com/4/patreon-media/p/post/126343013/07300ed3d782432791916925a068054a/eyJ3Ijo4MjB9/1.png?token-time=1746748800&amp;token-hash=MAEUfYz3P7XILwMxP2oQEkBdWoyR5jkmUV0j-o8T-YU%3D\\">Старт виконання команди</p><p><img src=\\"https://c10.patreonusercontent.com/4/patreon-media/p/post/126343013/f9482cf516dc4188a7f3cad4017b6e05/eyJ3Ijo4MjB9/1.png?token-time=1746748800&amp;token-hash=ZOM29xfKWWZD-ZORX8m30OOLjKyUkTnBQryHi9Jc1CM%3D\\">Команда успішно виконана</p><p>Можливі помилки та їх вирішення</p><p>Якщо браузер не запустився, а в терміналі видно помилки (ERR!), переконайтеся що:</p><ul><li><p>У вас встановлено Node.js та Python останньої версії</p></li><li><p>Термінал відкритий з правами адміністратора</p></li><li><p>У назвах папок на всьому шляху до проекту немає символу # або !</p></li><li><p>Папки та файли мають бути названі латиницею без пробілів</p></li></ul><p>Підготовка редактора до комфортної роботи із шаблоном</p><blockquote><p>Для того щоб насолоджуватися можливостями шаблону ЧФ на повну, нам слід зробити деякі налаштування редактора. Як приклад представлений редактор VS Code</p></blockquote><h3>Налаштування псевдонімів</h3><p>У статті <a href=\\"architecture.html\\">Архітектура шаблону. Файли та папки</a> ви дізнаєтеся що різні частини HTML, SCSS, JS файлів знаходяться на різних рівнях вкладеності, що створює певні незручності при підключенні, наприклад картинок, у процесі розробки.</p><p>Незручності ми не любимо тому налаштуємо так звані псевдоніми (аліаси) шляхів до папок. Для цього нам потрібно встановити плагін <a href=\\"https://marketplace.visualstudio.com/items?itemName=ionutvmi.path-autocomplete\\">Path Autocomplete</a>.</p><p>За замовченням, ЧФ4 сам налаштує плагін відповидними псевдонімами вказаними у файлі налаштувань збірки. Там же можна вимкнути автоматичне налаштування.</p><p>Після цього ви можете сміливо використовувати псевдоніми при підключенні файлів, наприклад:</p><p>&lt;img src=\\"@img/cover.jpg\\" alt=\\"Малюнок\\"&gt;</p><p>Редактор розпізнає псевдонім і виведе список файлів у зазначеній папці, а під час збирання система сама поміняє псевдонім на потрібний шлях!</p><h3>Налаштування сніпетів</h3><p>Сніпети — це короткі коди, які можуть викликати готові заготовки коду будь-якого обсягу. Це величезно підвищує швидкість розробки.</p><p>Наприклад сніпет <strong>spollers + клавіша Tab</strong> виведе код спойлерів:</p><p>&lt;div data-fls-spollers class=\\"spollers\\"&gt; <br>&lt;details class=\\"spollers__item\\"&gt; <br>&lt;summary class=\\"spollers__title\\"&gt;Заголовок спойлера&lt;/summary&gt; <br>&lt;div class=\\"spollers__body\\"&gt;Контент спойлера&lt;/div&gt;<br>&lt;/details&gt;<br>&lt;/div&gt;</p><p>Звичайно, я використав цю супер можливість у своїх чертогах. Тобто, побудова, наприклад, правильної HTML структури для того чи іншого JS модуля я додав у сніпет.</p><blockquote><p>За замовченням, ЧФ4 автоматично додасть сніпети збірки у ваш проєкт і ви зможете ними користуватись під час розробки. Сніпети ЧФ4 будуть працювати паралельно з вашими сніпетами у редакторі. Автоматичне додавання сніпетів можна вимкнути у налаштуваннях збірки.</p></blockquote><p>Чудово, сніпети ЧФ4 на борту! У цій документації, а також у коді шаблону ви часто будете зустрічати підказки із зазначенням сніпету.</p><p>У наступній статті ми познайомимося зі структурою файлів та папок шаблону «Чертоги Фрілансера» 4</p><p>Приємної роботи !</p></div>"},{"filename":"architecture.html","title":"Архітектура «Чертогів Фрілансера» 4. Файли та папки","cover":"architecture.jpg","date":"10.04.2025","prev":"У цьому розділі поговоримо про архітектуру, ієрархію папок та файлів, стартового шаблона «Чертоги Фрілансера» 4 (далі ЧФ4) Розархівувавши збірку, в корені ви виявите такі файли та папки: Папка src - містить похідні файли та папки проекту. Саме тут працює розробник Файл template.config.js, містить користувацькі налаштування ЧФ4","content":"<div class=\\"content\\"><p>У цьому розділі поговоримо про архітектуру, ієрархію папок та файлів, стартового шаблона «Чертоги Фрілансера» 4 (далі ЧФ4)</p><p>Розархівувавши збірку, в корені ви виявите такі файли та папки:</p><ul><li><p>Папка <strong>src</strong> - містить похідні файли та папки проекту. Саме тут працює розробник</p></li><li><p>Файл <strong>template.config.js</strong>, містить користувацькі налаштування ЧФ4</p></li><li><p>Файл <strong>README.txt</strong> - важлива коротка інформація щодо використання ЧФ4</p></li><li><p>Файл <strong>cover.jpg</strong> - обкладинка ЧФ4</p></li><li><p>Файл <strong>package.json</strong>, містить команди запуску збирачів, інформацію про встановлені плагіни та їх версії. А також іншу інформацію про автора та версію збірки. Не рекомендується редагувати без відповідних знаннь</p></li><li><p>Файл <strong>docker-compose.yml</strong>, містись інструкції щодо встановлення та запуску серверу в режимі <em>fullstack</em> для роботи з <a href=\\"https://wordpress.com/\\">CMS WordPress</a>. Не рекомендується редагувати без відповідних знаннь</p></li><li><p>Папка <strong>template_modules</strong> містить функціонал збірки. Не рекомендується редагувати</p></li><li><p>Файл <strong>vite.config.js</strong>, містить інструкції для роботи системи VITE. Не рекомендується редагувати</p></li><li><p>При першому запуску будь-якого режиму, з'явиться папка <strong>.vscode</strong>, яка буде містити налаштування редактора та сніпети (якщо це дозволено в налаштуваннях ЧФ4)</p></li><li><p>При першому запуску команди npm run zip, з'явиться папка <strong>zip</strong>, яка буде містити zip-архів кінцевих файлів проєкту</p></li><li><p>При першому запуску режима <em>fullstack</em> (npm run wp, npm run wpbuild), з'явиться папка <strong>backend</strong>, яка містить папки <strong>wordpress</strong> та <strong>database</strong>. Не рекомендується редагувати без відповідних знаннь</p></li><li><p>Після інсталяції також автоматично з'являться папка <strong>node_modules</strong> та файл <strong>package-lock.json</strong>. Не редагувати</p></li></ul><h3>Вміст папки src:</h3><ul><li><p>Файл <strong>index.html</strong> - індексна (головна) сторінка проєкту що розробляється</p></li><li><p>Папка <strong>assets</strong> - використовується для зберігання медіа-файлів проєкту - зображеннь, шрифтів, іконок тощо</p></li><li><p>Папка <strong>styles</strong> - містить загальні файли стілів проєкту</p></li><li><p>Папка <strong>js </strong>- містить загальні файли скриптів проєкту, а також, папки та файли бібліотек та фреймворків</p></li><li><p>Папка <strong>pug</strong> - містить файли для роботи з препроцесором PUG</p></li><li><p>Папка <strong>php</strong> - містить PHP-компоненти та є головною папкою PHP-серверу якщо таке налаштування увімкнене</p></li><li><p>Папка <strong>files</strong> (порожня) - &nbsp;всі файли цієї папки будуть скопійовані в папку з результатом (dist/files)</p></li><li><p>Папка <strong>components</strong> - містить усі HTML/CSS/SCSS/JS <a href=\\"components.html\\">компоненти ЧФ4</a>, а також тему для CMS WordPress, шаблони HTML-сторінок та їх головний контент</p></li></ul><p><strong>Вміст папки src/components:</strong></p><p>Містить усі HTML/CSS/SCSS/JS компоненти ЧФ4, а також тему для CMS WordPress, шаблони HTML-сторінок та їх головний контент</p><ul><li><p>Папка <strong>custom </strong>(порожня) - тут можна створювати <a href=\\"components.html\\">власні компоненти</a></p></li><li><p>Папка <strong>wordpress</strong> - містить тему для CMS WordPress, плагін та допоміжні файли. Використовується для розробки інтерфейся під CMS WordPress в режимі <em>fullstack</em> (npm run wp, npm run wpbuild)</p><ul><li><p><strong>fls-theme</strong> - тема для CMS WordPress</p></li><li><p><strong>fls-plugin</strong> - власний плагін для CMS WordPress</p></li><li><p><strong>JS-файли</strong> - допоміжні файли, не редагувати, не видаляти</p></li></ul></li><li><p>Папка <strong>templates</strong> - містить шаблони HTML-сторінок, можна додавати свої</p><ul><li><p>Папка <strong>main</strong> - містить HTML/SCSS/JS файли основного HTML-шаблону проєкту</p></li><li><p>Папка <strong>projectpage</strong> - містить HTML-шаблон сторінки проєкту</p></li></ul></li><li><p>Папка <strong>pages</strong> - містить HTML/SCSS/JS файли основного контенту сорінок проєкту</p><ul><li><p>Папка <strong>home</strong> - містить HTML/SCSS/JS файли основного контенту інтексної (головної) сторінки проєкту</p></li></ul></li><li><p>Папка <strong>effects</strong> - містить папки та HTML/SCSS/JS файли компонентів які додають в проєкт різноманітні ефекти. Можна додавати свої</p></li><li><p>Папка <strong>forms</strong> - містить папки та HTML/SCSS/JS файли компонентів які додають в проєкт різноманітний функціонал для роботи з формами та їх елементами. Можна додавати свої</p></li><li><p>Папка <strong>layout</strong> - містить папки та HTML/SCSS/JS файли компонентів які додають в проєкт різноманітні частини інтерфейсу. Можна додавати свої</p></li></ul><p>Додатково, папки компонентів можуть містити папки та файли плагінів конкретного компоненту, наприклад src/components/layout/header/plugins/scroll</p><p>Вміст папки src/assets:</p><ul><li><p>Папка <strong>fonts</strong> (порожня) - використовується для конвертації та додавання локальних шрифтів в проєкт.</p></li><li><p>Папка <strong>img</strong> - використовується для зберігання та використання зображень. Містить файл favicon.ico який підключений до HTML-сторінок (замінюємо на свій)</p></li><li><p>Папка <strong>svgicons</strong> (порожня) - використовується для конвертації та додавання в проєкт іконкового шрифту та/або спрайту</p></li></ul><p>Вміст папки src/styles:</p><ul><li><p>Файл <strong>style.scss</strong> - головний файл стилів, який підключається до усіх HTML-сторінок.</p></li><li><p>Файл <strong>settings.scss</strong> - файл налаштуваннь загальних значень стилів проєкту</p></li><li><p>Папка <strong>fonts</strong> - містить <em>автоматично заповнювані</em>, при запуску будь-якого режиму, CSS-файли стилів підключення локальних та іконкового шрифтів</p></li><li><p>Папка <strong>includes</strong> - містить загальні CSS/SCSS-файли стілів</p><ul><li><p>Файл <strong>index.scss</strong> - а<em>втоматично підключається</em> до кожного SCSS-файлу проєкту та містить підключення налаштувань, SCSS міксінів та шаблонів. Можна підключати свої</p></li><li><p>Файл <strong>extends.scss</strong> - містить набір SCSS-шаблонів. Можна додавати свої</p></li><li><p>Файл <strong>mixins.scss</strong> - містить набір SCSS-міксінів. Можна додавати свої</p></li><li><p>Файл <strong>spritemap.scss</strong> - містить SCSS-міксін для роботи з SVG-спрайтом. <em>Заповлюється автоматично</em></p></li></ul></li><li><p>Папка <strong>libs</strong> - містить а<em>втоматично підключаємі</em> до HTML-сторінок CSS-файли</p><ul><li><p>Файл <strong>reset.css</strong> - а<em>втоматично підключається</em> до кожної HTML-сторінки, якщо не використовується інша CSS-бібліотека/фреймворк</p></li><li><p>Файл <strong>tailwind.css</strong> - а<em>втоматично підключається</em> до кожної HTML-сторінки, якщо використання вказано в налаштуваннях ЧФ4</p></li></ul></li></ul><p>Вміст папки src/js:</p><ul><li><p>Файл <strong>app.js</strong> (порожній) - основний файл, загальних для усього проєкту, скриптів. Підключається до кожної HTML-сторінки</p></li><li><p>Папка <strong>common</strong> - містить файли загальних скриптів</p><ul><li><p>Файл <strong>functions.js</strong> - містить корисні функції, які використовуються в компонентах ЧФ4</p></li></ul></li><li><p>Папка <strong>react</strong> - містить стартові файли та папки для роботи з React</p></li><li><p>Папка <strong>vue</strong> - містить стартові файли та папки для роботи з Vue</p></li></ul></div>"},{"filename":"settings.html","title":"Налаштування збірки «Чертоги Фрілансера» 4","cover":"settings.jpg","date":"10.04.2025","prev":"На цій сторінці описані налаштування збірки «Чертоги Фрілансера» 4 (Далі ЧФ4). ЧФ4 побудована так, щоб якомога більше можливостей можна було налаштувати під потреби користувача. Для того щоб налаштувати збірку відкриваємо файл template.config.js в папці проєкту. Перелік налаштувань: lang - Налаштування мови ЧФ4: ua/en vscode - Налаштування редактора VS Code","content":"<div class=\\"content\\"><p>На цій сторінці описані налаштування збірки «Чертоги Фрілансера» 4 (Далі ЧФ4).</p><blockquote><p>ЧФ4 побудована так, щоб якомога більше можливостей можна було налаштувати під потреби користувача.</p></blockquote><p>Для того щоб налаштувати збірку відкриваємо файл <strong>template.config.js</strong> в папці проєкту.</p><p>Перелік налаштувань:</p><ul><li><p><strong>lang</strong> - Налаштування мови ЧФ4: ua/en</p></li><li><p><strong>vscode</strong> - Налаштування редактора VS Code</p><ul><li><p><strong>settings</strong> - Автоматичне налаштування псевдонімів для проєкту (плагін <a href=\\"https://marketplace.visualstudio.com/items?itemName=ionutvmi.path-autocomplete\\">Path Autocomplete</a>)</p></li><li><p><strong>snippets</strong> - Автоматичне додавання сніпетів ЧФ4 в проєкт</p></li></ul></li><li><p><strong>navpanel</strong> - Налаштування навігаційної панелі</p><ul><li><p><strong>dev</strong> - У режимі розробника. Вмикач: true/false</p></li><li><p><strong>build</strong> - У режимі продакшена. Вмикач: true/false</p></li><li><p><strong>position</strong> - Позиція виводу панелі: left/right</p></li><li><p><strong>color</strong> - Колір тексту та посилань</p></li><li><p><strong>background</strong> - Колір фону</p></li><li><p><strong>transition</strong> - Швидкість анімації відкриття у мілісекундах</p></li></ul></li><li><p><strong>server</strong> - Налаштування локального серверу</p><ul><li><p><strong>path</strong> - Налаштування шляхів до файлів: ./ - відносний, / - абсолютний</p></li><li><p><strong>copyfiles</strong> - Копіювання файлів з папки <em>src/files</em> у <em>dist/files</em> в режимі продакшн. Вмикач: true/false</p></li><li><p><strong>version</strong> - Додавання унікальної версії до кінцевих CSS/JS файлів. Вмикач: true/false</p></li><li><p><strong>hostname</strong> - Назва серверу</p></li><li><p><strong>port</strong> - Порт серверу</p></li></ul></li><li><p><strong>html</strong> - Налаштування обробки HTML-файлів</p><ul><li><p><strong>beautify</strong> - Форматування в режимі продакшн</p><ul><li><p><strong>enable</strong> - Вмикач: true/false</p></li><li><p><strong>indent</strong> - Налаштування типу відступів</p></li></ul></li></ul></li><li><p><strong>styles</strong> - Налаштування роботи зі стилями та обробки SCSS/CSS-файлів</p><ul><li><p><strong>tailwindcss</strong> - Підключити Tailwindcss. Вмикач: true/false</p></li><li><p><strong>pxtorem</strong> - Переводити PX в REM в режимі продакшн. Вмикач: true/false</p></li><li><p><strong>critical</strong> - Створити та додати в HTML-файли критичні CSS-стилі. Вмикач: true/false</p></li><li><p><strong>codesplit</strong> - Розділяти CSS-фали на окремі та підключати відповідним HTML-сторінкам в режимі продакшн. Вмикач: true/false</p></li><li><p><strong>devfiles</strong> - Створення нестиснутих копій файлів в режимі продакшн. Вмикач: true/false</p></li></ul></li><li><p><strong>fonts</strong> - Налаштування обробки шрифтів</p><ul><li><p><strong>iconsfont</strong> - Створення шрифту з SVG іконок (Іконкового шрифту) та підключення його в проєкт. Вмикач: true/false</p></li><li><p><strong>download</strong> - Завантажувати та робити локальними шрифти які підключені віддалено (наприклад з Google Fonts). Вмикач: true/false</p></li></ul></li><li><p><strong>images</strong> - Налаштування обробки зображень</p><ul><li><p><strong>svgsprite</strong> - Створення спрайту з SVG-іконок та підключення його в проєкт. Вмикач: true/false</p></li><li><p><strong>optimize</strong> - Налаштування оптимізації зображень в режимі продакшн</p><ul><li><p><strong>enable</strong> - Вмикач: true/false. Якщо оптимізаця вимкнена зображення просто копіюються без конвертації та оптимізації</p></li><li><p><strong>edithtml</strong> - Вносити зміни в HTML-файли. Якщо увімкнено, то HTML-файли будуть змінені згідно з налаштуваннями конвертації та створення додаткових розмірів зображень</p></li><li><p><strong>sizes</strong> - Розміри файлів, які будуть додатково створені</p></li><li><p><strong>dpi</strong> - Множники для створення додаткових файлів</p></li><li><p><strong>attrignore</strong> - Атрибут тега IMG при наявності якого зображення не буде оброблено</p></li><li><p><strong>modernformat</strong> - Налаштування конвертації в сучасні формати</p><ul><li><p><strong>enable</strong> - Вмикач: true/false</p></li><li><p><strong>type</strong> - Формат зображення в який потрібно конвертувати: webp/avif</p></li><li><p><strong>only</strong> - Залишати лише файли в сучасному форматі після конвертації. Вмикач: true/false</p></li><li><p><strong>quality</strong> - Якість зображення</p></li></ul></li><li><p><strong>jpeg</strong> - Налаштування оптимізації зображень</p><ul><li><p><strong>quality</strong> - Якість зображення,</p></li></ul></li><li><p><strong>png</strong> - Налаштування оптимізації зображень</p><ul><li><p><strong>quality</strong> - Якість зображення</p></li></ul></li></ul></li></ul></li><li><p><strong>js</strong> - Налаштування обробки JavaScript-файлів</p><ul><li><p><strong>hotmodules</strong> - \\"Гаряче\\" підключення компонентів. Вмикач: true/false</p></li><li><p><strong>devfiles</strong> - Створення нестиснутих копій файлів в режимі продакшн. Вмикач: true/false</p></li><li><p><strong>bundle</strong> - Налаштування формування кінцевого файлу в режимі продакшн</p><ul><li><p><strong>enable</strong> - Система збирає весь код в один JS та один CSS файли незалежно від налаштування styles -&gt; codesplit. Вмикач: true/false</p></li></ul></li></ul></li><li><p><strong>react </strong>- Вмикає обробку React. Вмикач: true/false</p></li><li><p><strong>vue</strong> - Вмикає обробку Vue. Вмикач: true/false</p></li><li><p><strong>php</strong> - Налаштування PHP-серверу</p><ul><li><p><strong>enable</strong> - Вмикач: true/false</p></li><li><p><strong>base</strong> - Шлях до папки де знаходяться файли PHP</p></li><li><p><strong>hostname</strong> - Ім'я хосту</p></li><li><p><strong>port</strong> - Порт</p></li><li><p><strong>binary</strong> - Шлях до папки де встановлений інтерпритатор PHP</p></li><li><p><strong>ini</strong> - Шлях до файлу налаштувань php.ini</p></li></ul></li><li><p><strong>pug</strong> - Налаштування препроцесору PUG</p><ul><li><p><strong>enable</strong> - Вмикач: true/false</p></li></ul></li><li><p><strong>ftp</strong> - Налаштування відправлення кінцевих файлів (з папки dist) на сервер (хостинг) по FTP в режимі продакшена</p><ul><li><p><strong>host</strong> - Ім'я FTP хосту</p></li><li><p><strong>port</strong> - FTP Порт</p></li><li><p><strong>remoteDir</strong> - Віддалена папка на сервері</p></li><li><p><strong>user</strong> - Ім'я користувача FTP</p></li><li><p><strong>password</strong> - Пароль користувача FTP</p></li></ul></li><li><p><strong>logger</strong> - Логи роботи модулів та компонентів збірки</p><ul><li><p><strong>terminal</strong> - Логи роботи модулів в терміналі. Вмикач: true/false</p></li><li><p><strong>console</strong> - Логи роботи компонентів в консолі</p><ul><li><p><strong>enable</strong> - Вмикач: true/false</p></li><li><p><strong>removeonbuild</strong> - Прибирає логи в режимі продакшн. Вмикач: true/false</p></li></ul></li></ul></li><li><p><strong>projectpage</strong> - Cтворення сторінки проєкту в режимі продакшн. Сторінка буде містити посилання на усі HTML-файли проєкту для зручної демонстрації замовнику</p><ul><li><p><strong>enable</strong> - Вмикач: true/false</p></li><li><p><strong>projectname</strong> - Назва проєкту, яка виводиться на сторінці замість %projectname%. Якщо порожньо, замінеться назвою папки проєкту</p></li><li><p><strong>template</strong> - Шлях до шаблону сторінки проєкту</p></li><li><p><strong>outfilename</strong> - Ім'я файлу. Якщо порожньо то створиться HTML-файл з назвою папки проєкту</p></li></ul></li><li><p><strong>aliases</strong> - Налаштування псевдонімів</p></li><li><p><strong>coffee</strong> - Налаштування повідомлення про перерву</p><ul><li><p><strong>enable</strong> - Вмикач: true/false</p></li><li><p><strong>text</strong> - Текст повідомлення</p></li><li><p><strong>interval</strong> - Інтервал виводу повідомлення в хвилинах</p></li></ul></li></ul></div>"},{"filename":"fonts.html","title":"Робота зі шрифтами. Локальні, іконкові шрифти та підключення з Google Fonts","cover":"fonts.jpg","date":"10.04.2025","prev":"Підключення шрифтів з Google Fonts: Найпростіший спосіб - це скористатися плагіном для VS Code Google Fonts Натискаємо F1 і шукаємо плагін Google Fonts Якщо хочемо підключити шрифт окремим тегом link у HTML файл, вибираємо Google Fonts: insert <link>","content":"<div class=\\"content\\"><h3>Підключення шрифтів з Google Fonts:</h3><p>Найпростіший спосіб - це скористатися плагіном для VS Code <a href=\\"https://marketplace.visualstudio.com/items?itemName=Pavlo-K.better-google-fonts\\">Google Fonts</a></p><ul><li><p>Натискаємо <strong>F1</strong> і шукаємо плагін <strong>Google Fonts</strong></p></li><li><p>Якщо хочемо підключити шрифт окремим тегом link у HTML файл, вибираємо <strong>Google Fonts: insert &lt;link&gt;</strong></p></li><li><p>Якщо хочемо підключити шрифт до файлу стилів (зазвичай це <strong>src/styles/style.scss</strong>), вибираємо <strong>Google Fonts: insert CSS @import</strong></p></li><li><p>Зі списку обираємо потрібний шрифт, можна скористатися пошуком</p></li><li><p>Зі списку обираємо потрібні варіації шрифту</p></li><li><p>Тиснемо \\"Ok\\"</p></li></ul><p><em>Приклад підключення шрифту Montserrat + варіації:</em></p><p>@import url(\\"<a href=\\"https://fonts.googleapis.com/css?family=Montserrat:regular,600,700&amp;display=swap\\">https://fonts.googleapis.com/css?family=Montserrat:regular,600,700&amp;display=swap</a>\\");</p><p>Шрифти, підключені з Google Fonts, не повинні потрапляти в папку з результатом (dist), вони підвантажуються з сервера Google. Але, якщо ви хочете щоб підключені віддалені шрифти підключились локально, скористайтесь налаштуванням ЧФ4: <strong>fonts -&gt; download: true</strong></p><p>Також варто зазначити, що отримати рядок для підключення шрифту ви можете і без плагіна на сайті <a href=\\"https://fonts.google.com/\\">Google Fonts</a>.</p><h3>Підключення локальних файлів шрифтів</h3><p>У стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (далі - ЧФ4) весь процес підключення локальних та іконочних шрифтів максимально автоматизований. Вихідні файли шрифтів конвертуються з сучасного <a href=\\"https://www.w3.org/TR/WOFF2/\\">веб-формату .WOFF2</a>, а також виконується запис підключення шрифтів у файл стилів, включаючи значення font-weight та font-style на основі імені файлу.</p><p>Правила назв файлів шрифтів</p><p>Оскільки ЧФ4 автоматизує процес підключення родин шрифтів а також їх варіацій, важливо правильно називати файли за схемою:</p><p>назва родини-варіація</p><p>Наприклад, якщо файл з назвою KoPubBatang-Bold.ttf, то система підключе родину (font-family) KoPubBatang та варіацію (font-weight) 700.</p><p>Покрокова інструкція підключення локальних шрифтів:</p><ul><li><p>Завантажити або отримати від дизайнера/замовника файли шрифтів у форматі .TTF, .OTF або .WOFF2 і покласти їх у папку <strong>src/assets/fonts</strong></p></li><li><p>Перевірити назви файлів враховуючи інформацію вище</p></li><li><p>Запустити режим розробки</p></li><li><p>Вказати сімейство шрифту за замовчуванням у змінній <strong>$fontFamily</strong> у файлі <strong>src/style/settings.scss</strong>, та, за наявності інших родин та/або варіацій шрифту, іншим селекторам у стилях проєкту</p></li></ul><p>Як ЧФ4 обробляє шрифти?</p><p>При запуску збірки в будь-якому режимі, ЧФ4 перевірить, чи є файли шрифтів у форматах .TTF, .OTF або .WOFF2 у папці <strong>src/assets/fonts</strong></p><p>Далі відбуваються наступні етапи:</p><ul><li><p>Файли .OTF (якщо вони є) конвертуються у .TTF і зберігаються у папці src/assets/fonts</p></li><li><p>Файли .TTF (якщо вони є) конвертуються у .WOFF2 і записуються у папку src/assets/fonts</p></li><li><p>Файли .WOFF2 (якщо вони є) просто скануються для наступного етапу підключення</p></li><li><p>Файли-похідники .OTF та .TTF (якщо вони є) видаляються</p></li><li><p>Після конвертації ЧФ4 запише в файл <strong>src/styles/fonts/fonts.css</strong> конструкції @font-face для всіх файлів, включаючи значення font-weight та font-style, засновані на імені файлу шрифту. Заповнений файл стилів автоматично підключиться до усіх HTML-сторінок проєкту</p></li></ul><h3>Створення іконкового шрифту та підключення його в проєкт:</h3><ul><li><p>Помістити іконки в форматі SVG в папку <strong>src/assets/svgicons</strong></p></li><li><p>Увімкнути в налаштуваннях ЧФ4 створення іконкового шрифту (fonts-&gt;iconsfont: true)</p></li><li><p>Запустити режим розробки</p></li><li><p>Використовувати спеціальні класи в HTML розмітці для виводу іконки з набору. Подивитись увесь набір іконок в шрифті та їх класи ви можете за посиланням в панелі розробника (якщо вона увімкнена в налаштуваннях ЧФ4).</p></li></ul><p>Класи іконкового шрифту можна використовувати як окремо:</p><blockquote><p>&lt;button class=\\"button --icon-some\\"&gt;Some text&lt;/button&gt;</p></blockquote><p>Так і як модифікатор:</p><blockquote><p>&lt;button class=\\"button button--icon-some\\"&gt;Some text&lt;/button&gt;</p></blockquote><p>Після додавання класу, в об'єкті створиться псевдоелемент ::before який і буде виводити іконку</p><h3>Налаштування ЧФ4 для роботи зі шрифтами</h3><p>В файлі налаштувань ЧФ4 в розділі fonts ви знайдете:</p><ul><li><p>iconsfont - вмикає створення та підключення іконкового шрифту</p></li><li><p>download - вмикає завантаження та підключення локально віддалених шрифтів</p></li></ul></div>"},{"filename":"styles.html","title":"Робота зі стилями. Файли Settings.scss та Style.scss","cover":"styles.jpg","date":"10.04.2025","prev":"В \\"Чертогах Фрілансера\\" 4 (далі ЧФ4) використовується препроцесор SASS в синтаксісі SCSS, що дає змогу використовувати широкий та потужний функціонал для створення стилів проєкту та їх керування. Завдяки компонентному підходу ЧФ4, є можливість описувати стилі для кожної сторінки та кожного блоку окремо, у файлах відповідного компоненту. Це надасть змогу ситемі роздаляти стилі по сторінках, що позитивно впливає на оптимізацію проєкту. Окремі файли стилів компонентів ви знайдете у папці src/components","content":"<div class=\\"content\\"><p>В \\"Чертогах Фрілансера\\" 4 (далі ЧФ4) використовується <a href=\\"https://sass-lang.com/\\">препроцесор SASS в синтаксісі SCSS</a>, що дає змогу використовувати широкий та потужний функціонал для створення стилів проєкту та їх керування.</p><blockquote><p>Завдяки компонентному підходу ЧФ4, є можливість описувати стилі для кожної сторінки та кожного блоку окремо, у файлах відповідного компоненту. Це надасть змогу ситемі роздаляти стилі по сторінках, що позитивно впливає на оптимізацію проєкту. Окремі файли стилів компонентів ви знайдете у папці <strong>src/components</strong></p></blockquote><p>Для зручності працювати зі стилями варто використовуючи значення у PX (пікселях), та, де це потрібно, у % (відсотках) та EM. Система автоматично переведе усі значення в PX у відносні одиниці REM в режимі продакшн (якщо це увімкнено в налаштуваннях ЧФ4)</p><h3>Файл settings.scss</h3><p>Файл <strong>src/styles/settings.scss</strong> є головним файлом налаштувань значень стилів за замовченням, роботи адаптивної сітки та міксінів, зокрема таких як \\"Чуйна властивість\\"</p><blockquote><p>Файл автоматично підключається до кожного SCSS-проєкту, та саме з цього файлу варто починати роботу над інтерфейсом</p></blockquote><p><img src=\\"https://c10.patreonusercontent.com/4/patreon-media/p/post/126343911/acd915b64ed64b5f8e9c7f9a61f07f0c/eyJ3Ijo4MjB9/1.png?token-time=1746748800&amp;token-hash=5itkzQl502y4IYKRFCAtjvogZj4kyhN5si3cnhoQX6w%3D\\">Файл <strong>settings.scss</strong></p><p>Налаштування сімейства, розміру та кольору шрифту за замовчуванням</p><p>Для того, щоб працювати зі шрифтами, спочатку потрібно їх підключити. Всі дії докладно описані у <a href=\\"https://www.patreon.com/posts/robota-zi-ta-z-126343813\\">цій статті.</a></p><p>Після виконання дій щодо підключення шрифтів необхідно вказати значення для наступних змінних</p><p><strong>$fontFamily</strong> - ім'я сімейства шрифт за замовчуванням. Вказуємо ім'я основного шрифту у проекті та його тип, наприклад:</p><p>$fontFamily: \\"Montserrat, sans-serif\\";</p><p><strong>$fontSize</strong> - розмір шрифту за замовчуванням. Слід вказати значення розміру шрифту за замовчуванням у пікселях (тільки число без px):</p><p>$fontSize: 16;</p><p><strong>$mainColor</strong> - колір шрифту за замовчуванням. Вказуємо код кольору:</p><p>$mainColor: #000;</p><p>Також, тут можна додавати й інші змінні, у тому числі з кодами кольорів створюючи кольорову палітру проєкту</p><p>Налаштування адаптивної сітки</p><p>У ЧФ4 є можливість налаштувати обмежуючий контейнер на роботу як з адаптивною(чуйною) версткою, так і з версткою по брейкпоїнтах.</p><p>Перед початком робіт налаштовуємо наступні змінні:</p><p><strong>$minWidth</strong> - мінімальна ширина вьюпорта (екрана), що підтримується проектом. Зазвичай це 320px, але з відмиранням старих пристроїв, це значення можна змінювати на будь-яке потрібне, вказуємо тільки число без px:</p><p>$minWidth: 320;</p><p><strong>$maxWidth</strong> - ширина всього макета (полотна), не плутати з шириною контейнера, що обмежує. Як правило, дизайнери надають макети шириною 1920 чи 1440 пікселів, але це значення може бути будь-яким. Вимірюємо макет і вказуємо лише число без px:</p><p>$maxWidth: 1920;</p><p><strong>$maxWidthContainer</strong> - ширина обмежуючого контейнера. Власне, це ширина контенту в макеті дизайну. Вимірюємо макет і вказуємо лише число без px:</p><p>$maxWidthContainer: 1170;</p><p>Якщо в макеті немає обмеження контенту, тобто контент розташований на всю ширину полотна (з відступами), то слід вказати значення <strong>0</strong> (нуль):</p><p>$maxWidthContainer: 0;</p><p><strong>$containerPadding</strong> - загальний відступ (сума відступів ліворуч і праворуч) у обмежуючого контейнера. Вказуємо лише число без px:</p><p>$containerPadding: 30;</p><p>Якщо відступів немає, або ви хочете використовувати адаптивну властивість, слід вказати <strong>0</strong> (нуль):</p><p>$containerPadding: 0;</p><p><strong>$containerWidth</strong> - ширина спрацьовування першого брейкпоїнту. Власне, це сума ширин обмежуючого контейнера та його відступів. Як правило, міняти тут нічого не потрібно.</p><p>$containerWidth: $maxWidthContainer + $containerPadding;</p><blockquote><p>Вищезгадані змінні впливають і на функціонал чуйної властивості, який описаний в окремій статті</p></blockquote><p>Налаштування брейкпоінтів</p><p>Налаштовуємо \\"стандартні\\" граничні ширини певних груп пристроїв:</p><p><strong>$pc</strong> - ПК, ноутбуки, деякі планшети в горизонтальному положенні. Як правило, тут вказується змінна <strong>$containerWidth</strong>:</p><p>$pc: $containerWidth;</p><p><strong>$tablet</strong> - планшети, деякі телефони у горизонтальному положенні. Зазвичай значення дорівнює 991.98px:</p><p>$tablet: 991.98;</p><p><strong>$mobile</strong> - великі телефони. Зазвичай значення дорівнює 767.98px:</p><p>$mobile: 767.98;</p><p><strong>$mobileSmall</strong> - маленькі телефони. Зазвичай значення дорівнює 479.98px:</p><p>$mobileSmall: 479.98;</p><blockquote><p>Для швидкого виклику медіа-запиту з потрібним брейкпоінтом можна використовувати <a href=\\"https://corkerro.github.io/fls/install.html#snippets\\">сніпети</a> md1, md2, md3, md4. Или, для Mobile First, mmd1, mmd2, mmd3, mmd4</p></blockquote><p>Налаштування типу адаптива (поведінка обмежуючого контейнера)</p><p><strong>$responsiveType</strong> - налаштування типу адаптива (поведінка обмежуючого контейнера):</p><ul><li><p><strong>1</strong> - чуйна. У контейнера немає брейкпоінтів, він звужується разом із браузером</p></li><li><p><strong>2</strong> - по брейкпоїтам. Контейнер змінює свою ширину за налаштованими брейкпоїнтами.</p></li></ul><p>$responsiveType: 1;</p><h3>Файл style.scss</h3><p>Файл <strong>src/styles/style.scss</strong> є основним та загальним файлом стилів проєкту у стартовому шаблоні \\"Чертоги Фрілансера\\" 4. Тут знаходяться основні стилі тегу &lt;body&gt;, елементу з класом .wrapper, та обмежуючого контейнеру (клас *__container) на основі налаштувань в файлі settings.scss</p><p><img src=\\"https://c10.patreonusercontent.com/4/patreon-media/p/post/126343911/1329e9186043435cadc4917caa272ac9/eyJ3Ijo4MjB9/1.png?token-time=1746748800&amp;token-hash=UO3wCEq1K8P53MC0Kd9MrKeAFIl1rcZemBGyvWsvjBE%3D\\">Файл style.scss</p><p>Підключення віддалених шрифтів</p><p>На початку файлу є секція де, за потреби, слід підключати віддалені шрифти, наприклад з <a href=\\"https://fonts.google.com/\\">Google Fonts</a>. Для цього зручно використовувати плагін для VS Code - <a href=\\"https://marketplace.visualstudio.com/items?itemName=Pavlo-K.better-google-fonts\\">Better Google Fonts for VS Code</a></p><p>Селектори та стилі</p><p><strong>body {}</strong> - стилі основного тега &lt;body&gt;.</p><p>Також додано підготовку для появи у тега &lt;html&gt; двох класів:</p><ul><li><p><strong>[data-fls-scrolllock] </strong>- блокування скролу. Для цього вже написано відповідні стилі</p></li><li><p><strong>[data-fls-loaded]</strong> - сайт завантажений. За цим класом ми можемо впливати на &lt;body&gt; для відображення контенту після повного завантаження даних</p></li></ul><p>.<strong>wrapper {}</strong> - обгортка всього контенту на сторінці. Для неї написані стилі притискання підвалу до низу сторінки, важливий параметр overflow: clip; який не дасть з'явитися горизонтальному скролу сторінки, а також вирішення інших проблем</p><p>Нижчевказано селектор обмежуючого контейнера та його стилі, значення яких багато в чому складаються з налаштувань в файлі settings.scss</p><p>Стилі обмежувального контейнера будуть застосовуватися до будь-якого елемента, у класі якого є рядок <strong>\\"__container\\"</strong>. Для зручності можна використовувати сніпет <strong>cnt</strong></p><p>&lt;div class=\\"block__container\\"&gt; ... &lt;/div&gt;</p><p>Загальні стилі проєкту</p><p>Нижче усіх предвстановлених стилів ви можете додавати власні загальні стилі які застосуються до <em>усіх сторінок проєкту</em>.</p><h3>Можливі налаштування ЧФ4 для роботи зі стилями</h3><p>У файлі налаштувань ЧФ4 в розділі styles ви знайдете:</p><ul><li><p>tailwindcss - вмикає використання tailwindcss, при цьому файл src/styles/libs/reset.css буде вимкнений</p></li><li><p>pxtorem - вмикає автоматичну конвертацію PX в REM</p></li><li><p>critical - вмикає створення та інтеграцію в HTML критичних стилів</p></li><li><p>codesplit - розділяє стилі по сторінках проєкту</p></li><li><p>devfiles - створює не стиснуті файл стилів</p></li></ul></div>"},{"filename":"html.html","title":"Робота з HTML. Огляд функціоналу.","cover":"html.jpg","date":"10.04.2025","prev":"В збірці \\"Чертоги Фрілансера\\" 4 інтегровані широкі можливості роботи з HTML-файлами які, за бажанням, можна використовувати під час розробки того чи іншого проєкту. Підключення окремих HTML-файлів В процесі розробки HTML-конструкцій часто виникають ситуації коли є потреба перевикористати той чи інший відрізок коду в різних місцях, особливо враховуючи компонентний підхід ЧФ4.","content":"<div class=\\"content\\"><p>В збірці \\"Чертоги Фрілансера\\" 4 інтегровані широкі можливості роботи з HTML-файлами які, за бажанням, можна використовувати під час розробки того чи іншого проєкту.</p><p>Підключення окремих HTML-файлів</p><p>В процесі розробки HTML-конструкцій часто виникають ситуації коли є потреба перевикористати той чи інший відрізок коду в різних місцях, особливо враховуючи компонентний підхід ЧФ4.</p><p>Для вирішення цих задач інтегрований функціонал \\"Вставка\\" (include).</p><blockquote><p>&lt;include src=\\"шлях до HTML-файлу\\"&gt;&lt;/include&gt;</p></blockquote><p>Давайте розглянемо цей функціонал на простому прикладі блоків &lt;head&gt;, &lt;header&gt; та &lt;footer&gt; проєкту, які мають бути підключені на усіх HTML-сторінках:</p><blockquote><p>&lt;!doctype html&gt;<br>&lt;html lang=\\"en\\"&gt;<br>&lt;!-- підключення head --&gt;<br>&lt;include src=\\"@components/layout/head/head.html\\"&gt;&lt;/include&gt;<br>&lt;body&gt;<br>&lt;div class=\\"wrapper\\"&gt;<br>&lt;!-- підключення header --&gt;<br>&lt;include src=\\"@components/layout/header/header.html\\"&gt;&lt;/include&gt;<br>&lt;main class=\\"page\\"&gt; &lt;!-- контент сторінки --&gt; &lt;/main&gt;<br>&lt;!-- підключення footer --&gt;<br>&lt;include src=\\"@components/layout/footer/footer.html\\"&gt;&lt;/include&gt;<br>&lt;/div&gt;<br>&lt;script type=\\"module\\" src=\\"@js/app.js\\"&gt;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</p></blockquote><p>Таким чином, редагуючи файл компонента, наприклад header.html, зміни відбудуться по всьому сайту де цей компонент підключений.</p><p>Використання HTML-шаблонів</p><p>Для більш складних та великих проєктів, буде зручно використовувати HTML-шаблони (templates). Зберігаються шаблони в папці src/components/templates. Звісно можна додавати свої.</p><p>Давайте розглянемо приклад коли на сайті є різні структури - на головній сторінці і ще декількох немає бокової панелі, а ще на декількох є. Відповідно ми можемо підготувати і потім використовувати різні структурні шаблони.</p><p>Ось приклад шаблону main.html:</p><blockquote><p>&lt;!doctype html&gt; <br>&lt;html lang=\\"en\\"&gt; <br>&lt;include src=\\"@components/layout/head/head.html\\"&gt;&lt;/include&gt; <br>&lt;link rel=\\"stylesheet\\" href=\\"@components/templates/main/main.scss\\"&gt; <br>&lt;body&gt;<br>&lt;div class=\\"wrapper\\"&gt;<br>&lt;block name=\\"header\\"&gt;&lt;/block&gt;<br>&lt;block name=\\"main\\"&gt;&lt;/block&gt;<br>&lt;block name=\\"footer\\"&gt;&lt;/block&gt; &lt;/div&gt; &lt;block name=\\"popup\\"&gt;&lt;/block&gt; <br>&lt;script type=\\"module\\" src=\\"@js/app.js\\"&gt;&lt;/script&gt;<br>&lt;/body&gt; <br>&lt;/html&gt;</p></blockquote><p>Ось приклад шаблону inner.html:</p><blockquote><p>&lt;!doctype html&gt; <br>&lt;html lang=\\"en\\"&gt; <br>&lt;include src=\\"@components/layout/head/head.html\\"&gt;&lt;/include&gt; <br>&lt;link rel=\\"stylesheet\\" href=\\"@components/templates/inner/inner.scss\\"&gt;<br>&lt;body&gt;<br>&lt;div class=\\"wrapper\\"&gt; <br>&lt;block name=\\"header\\"&gt;&lt;/block&gt;<br>&lt;div class=\\"inner\\"&gt; <br>&lt;block name=\\"main\\"&gt;&lt;/block&gt;<br>&lt;block name=\\"aside\\"&gt;&lt;/block&gt; <br>&lt;/div&gt; <br>&lt;block name=\\"footer\\"&gt;&lt;/block&gt;<br>&lt;/div&gt; <br>&lt;block name=\\"popup\\"&gt;&lt;/block&gt; <br>&lt;script type=\\"module\\" src=\\"@js/app.js\\"&gt;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</p></blockquote><p>Ми бачемо, що структура цих шаблонів відрізняється, та до кожного підключений свій унікальний файл стилів.</p><p><strong>&lt;block name=\\"ім'я блоку\\"&gt;</strong> - це комірка в яку ми можемо \\"вкладати\\" потрібний контент.</p><p>Ось приклад головной сторінки (index.html) яка використовує шаблон \\"main.html\\":</p><blockquote><p>&lt;template src=\\"@components/templates/main/main.html\\"&gt;<br>&lt;block name=\\"header\\"&gt; <br>&lt;include src=\\"@components/layout/header/header.html\\"&gt;&lt;/include&gt; <br>&lt;/block&gt; <br>&lt;block name=\\"main\\"&gt; <br>&lt;include src=\\"@components/pages/home/home.html\\"&gt;&lt;/include&gt;<br>&lt;/block&gt; <br>&lt;block name=\\"footer\\"&gt; <br>&lt;include src=\\"@components/layout/footer/footer.html\\"&gt;&lt;/include&gt;<br>&lt;/block&gt;<br>&lt;block name=\\"popup\\"&gt;&lt;/block&gt;<br>&lt;/template&gt;</p></blockquote><p>А ось приклад внутрішньої сторінки (contacts.html) яка будується по шаблону \\"inner.html\\":</p><blockquote><p>&lt;template src=\\"@components/templates/inner/inner.html\\"&gt; <br>&lt;block name=\\"header\\"&gt;<br>&lt;include src=\\"@components/layout/header/header.html\\"&gt;&lt;/include&gt;<br>&lt;/block&gt; <br>&lt;div class=\\"inner\\"&gt;<br>&lt;block name=\\"main\\"&gt;<br>&lt;include src=\\"@components/pages/contacts/contacts.html\\"&gt;&lt;/include&gt;<br>&lt;/block&gt; <br>&lt;block name=\\"aside\\"&gt; <br>&lt;include src=\\"@components/layout/aside/aside.html\\"&gt;&lt;/include&gt;<br>&lt;/block&gt;<br>&lt;/div&gt;<br>&lt;block name=\\"footer\\"&gt;<br>&lt;include src=\\"@components/layout/footer/footer.html\\"&gt;&lt;/include&gt;<br>&lt;/block&gt;<br>&lt;block name=\\"popup\\"&gt;&lt;/block&gt; <br>&lt;/template&gt;</p></blockquote><p>Як ми бачимо, в \\"комірки\\" шаблону вставлені різні компоненти, в тому числі, галовний контент конкретної сторінки - @components/pages/home/home.html та @components/pages/contacts/contacts.html</p><p>Використання елементів програмування в HTML-файлах</p><p>Використання <em>include</em> та <em>template</em> дуже допомагають в роботі з HTML-файлами, а щоб можливості були ще щирші я додав елементи програмування</p><h3>Вікористання змінних</h3><p>В ЧФ4 є можливість передавати дані в окремі HTML-файли, підключені через <em>include</em> та <em>template</em>, за допомогою <strong>locals</strong> (змінних)</p><p>Наприклад ми підключаємо head сатйу за допомогою <em>include</em> і на тій чи іншій сторінці (наприклад \\"Контакти\\"), хочемо вивести відповідний текст у тег &lt;title&gt;. Для цього передаємо дані у <a href=\\"https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/JSON\\">форматі JSON</a>:</p><blockquote><p>&lt;!DOCTYPE html&gt; <br>&lt;html lang=\\"uk\\"&gt;<br>&lt;include src=\\"@components/layout/head/head.html\\" locals='{\\"title\\":\\"Контакти\\"}'&gt;&lt;/include&gt;<br>&lt;body&gt;<br>&lt;div class=\\"wrapper\\"&gt;<br>&lt;include src=\\"@components/layout/header/header.html\\"&gt;&lt;/include&gt;<br>&lt;include src=\\"@components/pages/home/home.html\\"&gt;&lt;/include&gt; <br>&lt;include src=\\"@components/layout/footer/footer.html\\"&gt;&lt;/include&gt; <br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</p></blockquote><p>А у файлі head.html у тегу &lt;title&gt; виводимо змінну у подвійних квадратних дужках [[...]]:</p><blockquote><p>&lt;head&gt;<br>&lt;meta charset=\\"UTF-8\\" /&gt; <br>&lt;meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\"&gt; <br>&lt;link rel=\\"stylesheet\\" href=\\"@styles/style.scss\\"&gt;<br>&lt;title&gt;[[title]]&lt;/title&gt; <br>&lt;/head&gt;</p></blockquote><p>Результат:</p><p><img src=\\"https://c10.patreonusercontent.com/4/patreon-media/p/post/126344103/12c9a6c2c35745afab285d1e389d7304/e30%3D/1.png?token-time=1746748800&amp;token-hash=rymO6hGo3Y4raRnn-UuFgvE2bn3FjpfZ8oXuRAX5wR4%3D\\"></p><p>Таким чином можна передавати і виводити безліч інформації:</p><blockquote><p>&lt;!DOCTYPE html&gt; <br>&lt;html lang=\\"uk\\"&gt;<br>&lt;include src=\\"@components/layout/head/head.html\\" locals='{<br>\\"title\\":\\"Контакти\\", <br>\\"keywords\\":\\"ключове слово, ключове слово, ключове слово...\\", <br>\\"description\\":\\"опис сторінки...\\"<br>}'&gt;&lt;/include&gt; <br>&lt;body&gt; <br>&lt;div class=\\"wrapper\\"&gt; <br>&lt;include src=\\"@components/layout/header/header.html\\"&gt;&lt;/include&gt; <br>&lt;include src=\\"@components/pages/home/home.html\\"&gt;&lt;/include&gt;<br>&lt;include src=\\"@components/layout/footer/footer.html\\"&gt;&lt;/include&gt;<br>&lt;/div&gt;<br>&lt;/body&gt; <br>&lt;/html&gt;</p></blockquote><h3>Використання умов</h3><p>Передача інформації за допомогою змінних (locals) відкриває ще щирші можливості разом з умовним вітвленням &lt;if&gt; &lt;elseif&gt; &lt;else&gt;</p><p>Наприклад, нам необхідно додати клас пункту меню який відповідає сторінці сайту. Для цього передаємо інформацію у файл header.html за допомогою locals:</p><blockquote><p>&lt;!DOCTYPE html&gt;<br>&lt;html lang=\\"en\\"&gt; <br>&lt;include src=\\"@components/layout/head/head.html\\" locals='{\\"title\\":\\"Home Page\\"}'&gt;&lt;/include&gt; <br>&lt;body&gt;<br>&lt;div class=\\"wrapper\\"&gt; <br>&lt;include src=\\"@components/layout/header/header.html\\" locals='{\\"active\\":\\"Home\\"}'&gt;&lt;/include&gt; <br>&lt;include src=\\"@components/pages/home/home.html\\"&gt;&lt;/include&gt; <br>&lt;include src=\\"@components/layout/footer/footer.html\\"&gt;&lt;/include&gt; <br>&lt;/div&gt; <br>&lt;/body&gt; <br>&lt;/html&gt;</p></blockquote><p>У файлі header.html, при побудові меню, використовуємо умову:</p><blockquote><p>&lt;div class=\\"header__menu menu\\"&gt; <br>&lt;button type=\\"button\\" data-fls-menu class=\\"menu__icon icon-menu\\"&gt;&lt;span&gt;&lt;/span&gt;&lt;/button&gt; <br>&lt;nav class=\\"menu__body\\"&gt; <br>&lt;ul class=\\"menu__list\\"&gt;<br>&lt;if condition=\\"'[[active]]' === 'Home'\\"&gt;<br>&lt;li class=\\"menu__item\\"&gt;&lt;a href=\\"#\\" class=\\"menu__link menu__link--active\\"&gt;Home&lt;/a&gt;&lt;/li&gt; <br>&lt;/if&gt; <br>&lt;else&gt;<br>&lt;li class=\\"menu__item\\"&gt;&lt;a href=\\"[[item.href]]\\" class=\\"menu__link\\"&gt;Home&lt;/a&gt;&lt;/li&gt;<br>&lt;/else&gt;<br>... <br>&lt;/ul&gt;<br>&lt;/nav&gt; <br>&lt;/div&gt;</p></blockquote><h3>Вікористання циклів</h3><p>Для додаткової оптимізації побудов конструкцій додана можливість використання циклів &lt;each&gt;.</p><p>Ост приклад побудови меню за допомогою циклу на основі певного масиву даних:</p><blockquote><p>&lt;div class=\\"header__menu menu\\"&gt;<br>&lt;button type=\\"button\\" data-fls-menu class=\\"menu__icon icon-menu\\"&gt;&lt;span&gt;&lt;/span&gt;&lt;/button&gt;<br>&lt;nav class=\\"menu__body\\"&gt;<br>&lt;ul class=\\"menu__list\\"&gt;<br>&lt;each loop='item in [<br>{\\"href\\": \\"#\\",\\"ancor\\": \\"Home\\"},<br>{\\"href\\": \\"#\\",\\"ancor\\": \\"About\\"},<br>{\\"href\\": \\"#\\",\\"ancor\\": \\"Blog\\"},<br>{\\"href\\": \\"#\\",\\"ancor\\": \\"Contacts\\"}<br>]'&gt;<br>&lt;if condition=\\"'[[active]]' === '[[item.ancor]]'\\"&gt;<br>&lt;li class=\\"menu__item\\"&gt;<br>&lt;a href=\\"[[item.href]]\\" class=\\"menu__link menu__link--active\\"&gt;[[item.ancor]]&lt;/a&gt;<br>&lt;/li&gt;<br>&lt;/if&gt;<br>&lt;else&gt;<br>&lt;li class=\\"menu__item\\"&gt;<br>&lt;a href=\\"[[item.href]]\\" class=\\"menu__link\\"&gt;[[item.ancor]]&lt;/a&gt;<br>&lt;/li&gt;<br>&lt;/else&gt;<br>&lt;/each&gt;<br>&lt;/ul&gt;<br>&lt;/nav&gt;<br>&lt;/div&gt;</p></blockquote><h3>Налаштування ЧФ4 для роботи з HTML</h3><p>У файлі налаштувань ЧФ4 в розділі html ви знайдете:</p><ul><li><p>beautify - налаштування форматування в режимі продакшн</p><ul><li><p>enable - вмикач</p></li><li><p>indent - тип відступів</p></li></ul><p></p></li></ul></div>"},{"filename":"images.html","title":"Робота з зображеннями. Огляд функціоналу","cover":"images.jpg","date":"11.04.2025","prev":"Завантажити \\"Чертоги Фрілансера\\" 4 В збірці \\"Чертоги Фрілансера\\" 4 (ЧФ4) реалізована автоматизація широких можливостей оптимізації зображень: Оптимізація (зменьшення ваги) JPEG/JPG, PNG, GIF зображень Конвертація в сучасні формати WEBP/AVIF, що дуже суттєво зменьшує вагу зображень Створення меньших за розміром копій під різні ширини екранів Створення більших за розміром копій для виводу на екранах з високою щильністю пікселів на дюйм (DPI)","content":"<div class=\\"content\\"><p><a href=\\"download.html\\">Завантажити \\"Чертоги Фрілансера\\" 4</a></p><p>В збірці \\"Чертоги Фрілансера\\" 4 (ЧФ4) реалізована автоматизація широких можливостей оптимізації зображень:</p><ul><li><p>Оптимізація (зменьшення ваги) JPEG/JPG, PNG, GIF зображень</p></li><li><p>Конвертація в сучасні формати WEBP/AVIF, що дуже суттєво зменьшує вагу зображень</p></li><li><p>Створення меньших за розміром копій під різні ширини екранів</p></li><li><p>Створення більших за розміром копій для виводу на екранах з високою щильністю пікселів на дюйм (DPI)</p></li></ul><p>Усіма опціями можна керувати в <a href=\\"settings.html\\">налаштуваннях ЧФ4</a>, в розділі <strong>images -&gt; optimize</strong>:</p><blockquote><p>Увага! ЧФ4 не застосовує оптимізацію зображень при розробці під CMS WordPress</p></blockquote><p><strong>enable</strong> - дозволяє вимкнути будь-яку оптимізацію, це може бути потрібно у випадку подільшої інтеграції на бекенд, де існують власні методи оптимізації.</p><p><strong>edithtml</strong> - за потреби, дозволяє вимикати автоматичне редагування HTML-коду (вставка копій зображень під різні екрани, заміна назви файлу на сучасний формат при конвертації тощо)</p><p><strong>sizes</strong> - дозволяє через кому вказати ширини зображень які треба створити для виводу на відповідних екранах, наприклад якщо вказано [600, 1200] то:</p><p>В режимі розробки:</p><blockquote><p>&lt;img src=\\"@img/cover.jpg\\" alt=\\"Image\\"&gt;</p></blockquote><p>Після збірки проєкту:</p><blockquote><p>&lt;picture&gt;<br>&lt;source media=\\"(max-width: 600px)\\" srcset=\\"./assets/img/cover-600.webp\\" type=\\"image/webp\\"&gt;<br>&lt;source media=\\"(max-width: 1200px)\\" srcset=\\"./assets/img/cover-1200.webp\\" type=\\"image/webp\\"&gt;<br>&lt;img alt=\\"Image\\" src=\\"./assets/img/cover.webp\\"&gt;<br>&lt;/picture&gt;</p></blockquote><p>Якщо ми не хочемо щоб ЧФ4 проводив таку оптимізацію, лишаємо квадратні дужки порожніми: []</p><p><strong>dpi</strong> - дозволяє через кому вказати типи щилькості пікселів екранів (2x, 3x тощо) для яких треба створити зображення, наприклад при [2,3] попередній приклад буде виглядати вже ось так:</p><blockquote><p>&lt;picture&gt;<br>&lt;source media=\\"(max-width: 600px)\\" srcset=\\"./assets/img/cover-600.webp 1x,./assets/img/cover-600-2x.webp 2x,./assets/img/cover-600-3x.webp 3x\\" type=\\"image/webp\\"&gt;<br>&lt;source media=\\"(max-width: 1200px)\\" srcset=\\"./assets/img/cover-1200.webp 1x,./assets/img/cover-1200-2x.webp 2x,./assets/img/cover-1200-3x.webp 3x\\" type=\\"image/web<br>&lt;img alt=\\"Image\\" src=\\"./assets/img/cover.webp\\" srcset=\\"./assets/img/cover.webp 1x,./assets/img/cover-2x.webp 2x,./assets/img/cover-3x.webp 3x\\"&gt;<br>&lt;/picture&gt;</p></blockquote><p>Якщо ми не хочемо щоб ЧФ4 проводив таку оптимізацію, лишаємо квадратні дужки порожніми: []</p><p><strong>attrignore - </strong>назва атрибути, при додаванні якого до тегу IMG оптимізація зображення, вказаного в цьому тезі буде ігноруватись.</p><p><strong>modernformat - </strong>розділ конвертації в сучасні формати WEBP/AVIF</p><p><strong>modernformat -&gt; enable - </strong>керує потребою конвертувати зображення в сучасний формат</p><p><strong>modernformat -&gt; type - </strong>вказуємо в який формат конвертувати WEBP чи AVIF</p><p><strong>modernformat -&gt; only - </strong>якщо true то оригінальне зображення буде видалено, якщо false то буде інтегроване в конструкцію &lt;picture&gt;</p><p><strong>modernformat -&gt; quality - </strong>налаштування якості зображення від 0 до 100, чим вище число тим краща якість, але більша вага</p><p><strong>jpeg</strong> - керування налаштуваннями формату JPEG</p><p><strong>jpeg -&gt; quality - </strong>налаштування якості зображення від 0 до 100, чим вище число тим краща якість, але більша вага</p><p><strong>png</strong>- керування налаштуваннями формату PNG</p><p><strong>png -&gt; quality - </strong>налаштування якості зображення від 0 до 100, чим вище число тим краща якість, але більша вага</p><p></p></div>"},{"filename":"navpanel.html","title":"Навігаційна панель розробника","cover":"navpanel.jpg","date":"11.04.2025","prev":"В збірці \\"Чертоги Фрілансера\\" 4 (далі ЧФ4) реалізована можливість використання навігаційної панелі розробника, скорочено НПР. Що таке НПР? Навігаційна панель розробника (НПР) - це \\"плаваюче\\" меню яке в автоматичному режимі виводить наступну інформацію: Посилання на усі сторінки проєкту. А саме усі HTML-файли які розміщені в корні папки src, для зручності навігації по проєкту.","content":"<div class=\\"content\\"><div class=\\"sc-cdf8f18d-0 kkPVDe\\"><p>В збірці \\"Чертоги Фрілансера\\" 4 (далі ЧФ4) реалізована можливість використання <strong>навігаційної панелі розробника</strong>, скорочено <strong>НПР</strong>.</p><h3>Що таке НПР?</h3><p>Навігаційна панель розробника (НПР) - це \\"плаваюче\\" меню яке в автоматичному режимі виводить наступну інформацію:</p><ul><li><p>Посилання на усі сторінки проєкту. А саме усі HTML-файли які розміщені в корні папки <em>src</em>, для зручності навігації по проєкту.</p></li><li><p>При використання <a href=\\"https://www.patreon.com/posts/robota-zi-ta-z-126343813\\">іконкового шрифту</a>, посилання на сторінку з виводом усіх SVG-іконок та їх класів, для зручності їх копіювання. Посилання відкриється в новій вкладці</p></li><li><p>При використанні сторінки проєкту, посилання на шаблон сторінки проєкту для зручності її розробки. Посилання відкриється в новій вкладці</p></li></ul><p><img src=\\"https://c10.patreonusercontent.com/4/patreon-media/p/post/126433734/40881b3744f34b76955c34af99edc8ed/e30%3D/1.png?token-time=1746748800&amp;token-hash=Ni3cUhQRmJ0i869eTun7eykcsYl4tWpDmBWaLYjm40Q%3D\\"></p><h3>Налаштування НПР</h3><p>Увімкнути, або вимкнути НПР, в тому числі в режимі продакшн, можна в <a href=\\"https://www.patreon.com/posts/126343727\\">налаштуваннях ЧФ4</a>. Крім того, є можливість налаштування положення та зовнішнього вигляду панелі:</p><ul><li><p><strong>navpanel</strong> - Налаштування навігаційної панелі</p><ul><li><p><strong>dev</strong> - У режимі розробника. Вмикач: true/false</p></li><li><p><strong>build</strong> - У режимі продакшена. Вмикач: true/false</p></li><li><p><strong>position</strong> - Позиція виводу панелі: left/right</p></li><li><p><strong>color</strong> - Колір тексту та посилань</p></li><li><p><strong>background</strong> - Колір фону</p></li><li><p><strong>transition</strong> - Швидкість анімації відкриття у мілісекундах</p></li></ul></li></ul></div></div>"},{"filename":"components.html","title":"Робота з компонентами. Створення власних компонентів","cover":"components.jpg","date":"12.04.2025","prev":"Що таке компонент? Компонент - це окремий самодостатній об'єкт зі своїм власним HTML/SCSS/JS кодом, який може використовуватись та перевикористовуватись в проєкті. Розмір компонента може бути як дуже малий, наприклад одна кнопка, так і дуже великий - таби, спойлери, модальні вікна тощо. В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (далі ЧФ4) реалізований повний компонентний підхід до розробки а також \\"гаряче\\" підключення компонентів в проєкт.","content":"<div class=\\"content\\"><h3>Що таке компонент?</h3><p>Компонент - це окремий самодостатній об'єкт зі своїм власним HTML/SCSS/JS кодом, який може використовуватись та перевикористовуватись в проєкті. Розмір компонента може бути як дуже малий, наприклад одна кнопка, так і дуже великий - таби, спойлери, модальні вікна тощо.</p><p>В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (далі ЧФ4) реалізований повний компонентний підхід до розробки а також \\"гаряче\\" підключення компонентів в проєкт.</p><p>Додатково, для тих чи інших компонентів, реалізована система плагінів, які теж оснащені \\"горячим\\" підключенням.</p><p>Компоненти розташовані в папці src/components. Та розбиті на декілька груп згідно зі своїм типом:</p><ul><li><p>custom - папка для розміщення власних компонентів</p></li><li><p>effects - компоненти для додавання певних ефектів (анімацій) в проєкт</p></li><li><p>forms - компоненти для роботи з HTML-формами та їхніми елементами</p></li><li><p>layout - компоненти різних частин сайту, містить також шаблони сторінок</p></li><li><p>wordpress - містить файли і папки для <a href=\\"wordpress.html\\">розробки під CMS WordPress</a></p></li></ul><h3>Використання компонентів</h3><p>В ЧФ4 було досягнуто мінімальне втручання в JavaScript при роботі з шаблоном, тому для того щоб підключити той чи інший компонент в проєкт достатньо додати певний HTML-код, частіше всього це дата-атрибут який складається з <strong>data-fls-ім'я папки компоненту.</strong></p><blockquote><p>ЧФ4 розпізнає цей код, та автоматично підключить JS-файл та стилі з відповідної папки компоненту</p></blockquote><p>Наприклад, для додавання компоненту табів в проєкт, ми використовуємо HTML-структуру яка містить дата-атрибут <strong>data-fls-tabs:</strong></p><blockquote><p>&lt;div data-fls-tabs class=\\"tabs\\"&gt;<br>...<br>&lt;/div&gt;</p></blockquote><p>А якщо там треба використати функціонал <a href=\\"dynamic-adaptive.html\\">\\"Динамічного адаптиву\\"</a> то користуємось відповідним дата-атрибутом data-fls-dynamic=\\"...\\"<strong> </strong>тощо.</p><blockquote><p><strong>Як правильно використовувати той чи інший компонент ЧФ4 детально описано у </strong><a href=\\"https://www.patreon.com/collection/1439491?view=condensed\\">відповідній документації компоненту</a></p></blockquote><h3>Використання плагінів</h3><p>Трапляється, що у певного компоненту є або можуть з'явитись додаткові невеликі JS/SCSS можливості, тому в ЧФ4 розроблена система плагінів для компонентів.</p><p>Наприклад, компонент \\"Header\\" сам по собі не містить ніякого JS-функціоналу, і використовується для виводу HTML-структури та стилізації шапки сайту.</p><p>Але, згідно задачі, буває що необхідно додати певні ефекти до шапки залежно від скролу сайту. Для цього існує плагін scroll який знаходиться в папці plugins папки компоненту.</p><p>Відповідно, для підключення даного плагіну ми маємо використати дата-атрибут data-fls-header-scroll:</p><blockquote><p>&lt;header data-fls-header data-fls-header-scroll class=\\"header\\"&gt;<br>...<br>&lt;/header&gt;</p></blockquote><p>При викостанні плагінів, береться до уваги, що вони використовуються як доповнення до компоненту і не використовуються окремо.</p><h3>Створення та використання власних компонентів та плагінів</h3><p>В ЧФ4 є можливість створення власних компонентів і плагінів з подальшим використанням їх в проєкті.</p><p></p><p><strong>Для створення власних плагінів та компонентів, виконайте наступні дії:</strong></p><p>Для власного компоненту</p><ul><li><p>Створіть папку компоненту в src/component/custom/ назвавши її ім'ям вашого компоненту</p></li><li><p>Створіть HTML/SCSS/JS файли компоненту з тим же ім'ям що й папка вашого компоненту. Якщо ваш компонент не використовує HTML чи SCSS чи JS код то відповідні файли створювати не обов'язково.</p></li><li><p>Якщо ви створили та плануєте використовувати SCSS-файл стилів то його необхідно підключити в JS-файл (якщо він є) за допомогою import './ім'я компоненту.scss' або в HTML-файл: &lt;link rel=\\"stylesheet\\" href=\\"@components/custom/ім'я компоненту/ім'я компоненту.scss\\"&gt;</p></li></ul><blockquote><p><strong>Увага!</strong> Для швидкого створення базових файлів власного компоненту в папці src/component/custom ви можете скористатись командою npm run add ім'я компоненту.</p><p>Ім'я має бути латинецею без пробілів цифр та символів.</p><p>Після виконання в папці src/component/custom/ім'я компоненту будуть створені HTML, SCSS та JS файли компоненту. В JS-файл вже буде підключений SCSS-файл</p></blockquote><p>Для власного плагіну</p><ul><li><p>Створіть папку плагіну в src/component/custom/ім'я компоненту/plugins назвавши її ім'ям вашого плагіну</p></li><li><p>Створіть HTML/SCSS/JS файли плагіну з тим же ім'ям що й папка вашого плагіну. Якщо ваш плагіну не використовує HTML чи SCSS чи JS код то відповідні файли створювати не обов'язково.</p></li><li><p>Якщо ви створили та плануєте використовувати SCSS-файл стилів то його необхідно підключити в JS-файл (якщо він є) за допомогою import './ім'я плагіну.scss' або в HTML-файл: &lt;link rel=\\"stylesheet\\" href=\\"@components/custom/ім'я компоненту/plugins/ім'я плагіну/ім'я плагіну.scss\\"&gt;</p></li></ul><p><strong>Для використання власних компонентів та плагінів, виконайте наступні дії:</strong></p><p>Для використання власного компоненту</p><ul><li><p>Якщо ваш компонент містить JS-файл, то для його автоматичного (\\"горячого\\") підключення в проєкт додайте у ваш HTML-код дата-атрибут який складається з <strong>data-fls-ім'я папки вашого компоненту. </strong>Наприклад, ви створили компонент \\"aside\\", тож для його підключення<strong> </strong>дата-атрибут буде виглядати як <strong>data-fls-aside</strong></p></li><li><p>Якщо ваш компонент містить HTML-файл, який необхідно підключати в проєкт, робіть це за допомогою <a href=\\"html.html\\">&lt;include&gt;</a></p></li><li><p>Якщо ваш компонентмістить SCSS-файл, він підключеться разом з файлом компоненту у спосіб, відповідний до того як саме ви створили компонент</p></li></ul><p>Для використання власного плагіну</p><ul><li><p>Якщо ваш плагін містить JS-файл, то для його автоматичного (\\"горячого\\") підключення в проєкт додайте у ваш HTML-код дата-атрибут який складається з <strong>data-fls-ім'я папки вашого компоненту-ім'я папки вашого плагіну. </strong>Наприклад, ви створили плагін \\"move\\" компоненту \\"aside\\", тож для його підключення<strong> </strong>дата-атрибут буде виглядати як <strong>data-fls-aside-move</strong></p></li><li><p>Якщо ваш плагін містить HTML-файл, який необхідно підключати в проєкт, робіть це за допомогою <a href=\\"html.html\\">&lt;include&gt;</a></p></li><li><p>Якщо ваш плагін містить SCSS-файл, він підключеться разом з файлом плагіну у спосіб відповідний до того як саме ви створили плагін</p></li></ul><p></p></div>"},{"filename":"wordpress.html","title":"Розробка під CMS WordPress","cover":"wordpress.jpg","date":"12.04.2025","prev":"Стартовий шаблон \\"Чертоги Фрілансера\\" 4 (ЧФ4) оснащений можливостями які дозволяють з легкістю розробляти інтерфейс відразу з інтеграцією на CMS WordPress Для того щоб мати можливість працювати з повноційним сервером на своєму ПК, необхідно встановити систему Docker (вона безкоштовна для власного використання)","content":"<div class=\\"content\\"><p>Стартовий шаблон \\"Чертоги Фрілансера\\" 4 (ЧФ4) оснащений можливостями які дозволяють з легкістю розробляти інтерфейс відразу з інтеграцією на <a href=\\"https://wordpress.com/\\">CMS WordPress</a></p><p>Для того щоб мати можливість працювати з повноційним сервером на своєму ПК, необхідно встановити систему <a href=\\"https://www.docker.com/products/docker-desktop/\\">Docker</a> (вона безкоштовна для власного використання)</p><p><img src=\\"https://c10.patreonusercontent.com/4/patreon-media/p/post/126493216/211c0402b93b4857b73e92fefe834450/eyJ3Ijo4MjB9/1.png?token-time=1746748800&amp;token-hash=w4Ttz-Ze2iMACOS_4pyzfcFal0-f5PgFqYwf9PFbFv4%3D\\"></p><p>Після встановлення, <strong>Docker</strong> <strong>має бути просто увімкнений</strong>, без необхидності робити з ним щось ще.</p><p>Для початку роботи, після встановлення ЧФ4 та Docker, виконайте команду npm run wp</p><blockquote><p>При першому запуску, система створить папку backend куди запише папку database з базою даних та папку wordpress з CMS WordPress. Не редагуйте папку backend та її вміст без чіткого розуміння своїх дій.</p><p>Дaлі система відкриє браузер з адресою <a href=\\"http://localhost:8080/\\">http://localhost:8080/</a> та запропонує встановлення CMS WordPress на ваш новостворений сервер. Після інсталяції CMS все готово для розробки.</p></blockquote><p>Якщо ви запускаєте систему вже не вперше, то після команди npm run wp відкриється браузер з адресою серверу CMS WordPress <a href=\\"http://localhost:8080/\\">http://localhost:8080/</a> - головною сторінкою сайту.</p><blockquote><p><strong>Увага!</strong> Docker має бути запущений перед виконанням команди npm run wp</p></blockquote><p>Для того щоб почати розробку, перейдіть у src/components/wordpress. Тут ви знайдете папку fls-theme. Це папка вже встановленої теми на вашу CMS WordPress і вам достатньо просто редагувати файли згідно задачі.</p><p><img src=\\"https://c10.patreonusercontent.com/4/patreon-media/p/post/126493216/4d55f76a639c4cf489988755c361c61a/eyJ3Ijo4MjB9/1.png?token-time=1746748800&amp;token-hash=KB9m2QG_yESo2neSizE-bb876vENM3NPEYhlatK6O7c%3D\\"></p><blockquote><p>Редагування стилів відбувається в src/styles та і відповідних компонентах src/components</p><p>Редагування скриптів, в режимі розробника, відбувається у відповідних компонентах src/components та у файлі src/components/wordpress/fls-theme/assets/app.js, у випадку коли потрібно написати власну загальну логіку. Не видаляте підключення функціоналу import '../fls-wp-includes.js', це необхідно для коректної роботи.</p><p>Файл src/components/wordpress/fls-theme/assets/app.js, після збірки проєкту, вже не підключається. JS/CSS код збирається у відповідні файли в папці src/components/wordpress/fls-theme/assets/build</p><p>Також, після збірки, існує можливість внести правки у файли <br>/wp-content/themes/fls-theme/assets/build/css/custom.css та<br>/wp-content/themes/fls-theme/assets/build/js/custom.js</p></blockquote><blockquote><p><strong>Увага!</strong> Не редагуйте інші JS-файли які знаходяться в src/components/wordpress</p></blockquote><p>Також, у src/components/wordpress доступна папка fls-plugin для створення власного плагіну</p><p>Після завершення роботи на сайтом, виконайте команду npm run wpbuild, після цього, за допомогою плагіна WordPress для переносу сайту, який треба встановити самостійно, створіть дамп сайту та бази даних для подальшого переносу на віддалений сервер.</p><blockquote><p>Через те що після виконання команд npm run wp та npm run wpbuild запускається Docker сервер, його варто зупиняти в момент перерви у розробці або її завершення. Для цього виконуйте команду npm run wpstop</p></blockquote><p>Приємної роботи з ЧФ4</p></div>"},{"filename":"svg.html","title":"Робота з SVG-спрайтом","cover":"svg.jpg","date":"12.04.2025","prev":"В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (ЧФ4) є можливість працювати з SVG-спрайтом Для того щоб створити SVG-спрайт виконайте наступні дії: В налаштуваннях ЧФ4 увімкніть створення SVG-спрайту (images->svgsprite: true) Розмістіть SVG-іконки в папці src/assets/svgicons Запустіть режим розробника npm run dev Використання SVG-спрайту","content":"<div class=\\"content\\"><p><a href=\\"download.html\\">Завантажити \\"Чертоги Фрілансера\\" 4</a></p><p>В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (ЧФ4) є можливість працювати з SVG-спрайтом</p><p>Для того щоб створити SVG-спрайт виконайте наступні дії:</p><ul><li><p>В налаштуваннях ЧФ4 увімкніть створення SVG-спрайту (images-&gt;svgsprite: true)</p></li><li><p>Розмістіть SVG-іконки в папці src/assets/svgicons</p></li><li><p>Запустіть режим розробника npm run dev</p></li></ul><h3>Використання SVG-спрайту</h3><p>Для виводу іконки зі спрайту в HTML в режимі розробника ви можете скористатись одним з двох способів</p><p>Вивід за допомогою тегу &lt;use&gt;:</p><blockquote><p>&lt;svg&gt;<br>&lt;use xlink:href=\\"__spritemap#sprite-fb_icon\\"&gt;&lt;/use&gt;<br>&lt;/svg&gt;</p></blockquote><p>Або тегу &lt;img&gt;:</p><blockquote><p>&lt;img src=\\"__spritemap#sprite-fb_icon-view\\" alt=\\"Image\\"&gt;</p></blockquote><p>Де fb_icon це назва файлу іконки. Зверніть увагу, у варіанті виводу за допомогою тегу &lt;img&gt; до імені іконки додається суфікс -view</p><p>Для виводу інокни зі спрайту в SCSS в режимі розробника ви можете скористатись спеціальним міксіном:</p><blockquote><p>@include sprite(\\"fb_icon\\");</p></blockquote><p>Де fb_icon це назва файлу іконки. В результаті буде виведена властивість background з url іконки, без повторення по центру.</p></div>"},{"filename":"pug.html","title":"Робота з шаблонізотором PUG","cover":"pug.jpg","date":"12.04.2025","prev":"В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (ЧФ4) є можливість працювати з шаблонізотором PUG Для того щоб працювати з PUG виконайте наступні дії: В налаштуваннях ЧФ4 увімкніть обробку PUG (pug->enable: true)","content":"<div class=\\"content\\"><p><a href=\\"download.html\\">Завантажити \\"Чертоги Фрілансера\\" 4</a></p><p>В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (ЧФ4) є можливість працювати з <a href=\\"https://pugjs.org/api/getting-started.html\\">шаблонізотором PUG</a></p><p>Для того щоб працювати з PUG виконайте наступні дії:</p><p>В налаштуваннях ЧФ4 увімкніть обробку PUG (pug-&gt;enable: true)</p><p>В HTML-файлі сторінки додайте підключення PUG-файлу, наприклад:</p><blockquote><p>&lt;pug src=\\"@pug/index.pug\\"&gt;&lt;/pug&gt;</p></blockquote><p>Запустіть режим розробника npm run dev</p><p>Працюйте в PUG-файлах в папці src/pug</p></div>"},{"filename":"adaptive-property.html","title":"Чуйна (адаптивна) властивість","cover":"adaptive-property.jpg","date":"13.04.2025","prev":"За допомогою SCSS-міксину “Чуйна (адаптивна) властивість” можна налаштувати (в залежності від ширини екрану) автоматичну зміну значення тієї чи іншої CSS-властивості від початкового значення, на певній ширині екрана, до кінцевого значення на іншій ширині екрану. Можна вказувати довільні проміжки ширини. Також існує кілька режимів поведінки міксину поза вказаними проміжками. Використання міксину Щоб працювати з міксином потрібно в SCSS селекторі викликати сніпет av:","content":"<div class=\\"content\\"><p>За допомогою SCSS-міксину “Чуйна (адаптивна) властивість” можна налаштувати (в залежності від ширини екрану) автоматичну зміну значення тієї чи іншої CSS-властивості від початкового значення, на певній ширині екрана, до кінцевого значення на іншій ширині екрану. Можна вказувати довільні проміжки ширини. Також існує кілька режимів поведінки міксину поза вказаними проміжками.</p><h3>Використання міксину</h3><p>Щоб працювати з міксином потрібно в SCSS селекторі викликати сніпет <strong>av</strong>:</p><p><em>Базовий режим роботи міксину:</em></p><blockquote><p>@include adaptiveValue(\\"властивість\\", початкове значення, кінцеве значення);</p></blockquote><p>Де:</p><ul><li><p><strong>Властивість</strong> – CSS-властивість, значення якого необхідно адаптувати. Можна вказати будь-яку властивість, значення якого вказується у цифрах.</p></li><li><p><strong>Початкове значення </strong>– стартове значення властивості в пікселях, пишемо число без px. Зазвичай вказується по макету.</p></li><li><p><strong>Кінцеве значення </strong>– фінальне значення властивості в пікселях, пишемо число без px. Значення, до якого ми хочемо прийти на менших ширинах екрану.</p></li></ul><p><em>Приклади:</em></p><blockquote><p>@include adaptiveValue(\\"font-size\\", 50, 20); <br>@include adaptiveValue(\\"padding-top\\", 80, 10); <br>...</p></blockquote><h3>Алгоритм работы миксина</h3><p>Міксин працює на основі значень змінних <strong>$minWidth</strong>, <strong>$maxWidth</strong>, <strong>$maxWidthContainer</strong>, <strong>$containerPadding</strong> и <strong>$containerWidth</strong> розташованих в файлі  <a href=\\"styles.html\\">src/styles/settings.scss</a></p><p>У підсумку, за замовчанням, міксин працюватиме так:</p><p>Якщо <strong>$maxWidthContainer</strong> більше нуля, то значення властивості змінюватимуться в проміжку ширин від <strong>$containerWidth</strong> до <strong>$minWidth</strong>. Тобто, по всій ширині контейнера, що обмежує.</p><p>При цьому, якщо ширина екрана більша ніж <strong>$containerWidth</strong>, то значення властивості дорівнюватиме <strong>початковому </strong>значенню. Якщо ширина екрана менша ніж <strong>$minWidth</strong>, то значення властивості дорівнюватиме <strong>кінцевому значенню</strong>.</p><p>Якщо <strong>$maxWidthContainer</strong> дорівнює нулю, то значення властивості змінюватимуться в проміжку ширин від<strong> $maxWidth</strong> до <strong>$minWidth</strong>.</p><h3>Додаткові налаштування та режими роботи</h3><p><strong>Режими роботи</strong></p><p>Поведінку міксину ми можемо налаштувати вказавши режим роботи.</p><p>@include adaptiveValue(\\"властивість\\", початкове значення, кінцеве значення, режим роботи);</p><p><strong>Режим роботи</strong> – може приймати числові значення <strong>0 / не вказано </strong>, <strong>1</strong>, <strong>2</strong> або <strong>3</strong>:</p><ul><li><p><strong>0 / не вказано </strong>– Якщо ширина екрану більше ніж <strong>ширина від</strong>, то значення властивості дорівнює <strong>початковому значенню</strong>. Якщо ширина екрану менше ніж <strong>ширина до</strong>, то значення властивості дорівнюватиме <strong>кінцевому значенню</strong>.</p></li><li><p><strong>1</strong> – Міксин буде працювати <strong>тільки </strong>між <strong>мінімальною </strong>та <strong>максимальною </strong>шириною екрану, або <strong>тільки у зазначених проміжках</strong> якщо вони задані (про проміжки дивись далі). За цих ширин, значення властивості будуть за замовчюванням або успадковуватися від предків.</p></li><li><p><strong>2</strong> – Якщо ширина екрана більше ніж <strong>ширина від</strong>, то значення властивості дорівнює <strong>початковому значенню</strong>. Якщо ширина екрану менше ніж <strong>ширина до</strong>, значення властивості буде за замовчуванням або успадковуватися від предків.</p></li><li><p><strong>3</strong> – Якщо ширина екрана більше ніж <strong>ширина від</strong>, то значення властивості буде за замовчуванням або успадковуватися від предків. Якщо ширина екрана менше ніж <strong>ширина до</strong>, то значення властивості дорівнюватиме <strong>кінцевому значенню</strong>.</p></li></ul><p><em>Приклад:</em></p><blockquote><p>@include adaptiveValue(\\"font-size\\", 50, 20, 1);</p></blockquote><p><strong>Власні проміжки</strong></p><p>Міксин дозволяє вказати свій проміжок ширини всередині якого адаптуватиметься значення властивості.</p><p>@include adaptiveValue(\\"властивість\\", початкове значення, кінцеве значення, режим роботи, ширина від, ширина до);</p><ul><li><p><strong>ширина від</strong> – стартова ширина менше за яку почнеться адаптація, пишемо число без px.</p></li><li><p><strong>ширина до </strong>– кінцева ширина до якої буде адаптуватися значення властивості, пишемо число без px.</p></li></ul><blockquote><p><strong>Увага!</strong><br>При вказанні проміжків необхідно обов’язково вказати режим роботи</p></blockquote><p><em>Приклад:</em></p><blockquote><p>@include adaptiveValue(\\"font-size\\", 50, 20, 0, 800, 480);</p></blockquote><p>Також ми можемо використовувати кілька міксинових викликів з різними проміжками:</p><blockquote><p>@include adaptiveValue(\\"font-size\\", 50, 20, 2, 800, 480); <br>@include adaptiveValue(\\"font-size\\", 20, 10, 3, 480);</p></blockquote><p>У прикладі станеться таке: у проміжку ширин екрану від 800px до 480px значення властивості font-size буде чуйно адаптуватися від 50px до 20px, а в проміжку від 480px до 320px чуйно адаптуватися від 20px до 10px. Ширше 800px значення властивості буде 50px, вже 320px значення властивості буде 20px.</p><blockquote><p><strong>Увага!</strong> Не використовуйте додаткові медіа-запити для роботи з чуйною властивістю. Все, що вам потрібно, можна налаштувати за допомогою комбінацій кількості адаптивних властивостей, режимів і проміжків.</p></blockquote><h3>Розташування</h3><p>Міксін <strong>adaptiveValue</strong> знаходиться у файлі <strong>src/styles/includes/mixins.scss</strong></p></div>"},{"filename":"dynamic-adaptive.html","title":"Компонент \\"Динамічний адаптив\\"","cover":"dynamic-adaptive.jpg","date":"13.04.2025","prev":"Під час роботи над адаптивом сайту, нам постійно доводиться змінювати зовнішній вигляд об’єкта. У деяких випадках нам необхідно змінити порядок елементів, коли при певній ширині екрану деякий блок повинен перебувати в іншому місці HTML-структури. Функціонал динамічного адаптива переміщає необхідний блок (на певному розширенні екрану) до іншого блоку. Переміщення відображається у розмітці HTML. Коли ширина екрану змінюється в більшу сторону, об'єкт повертається на своє місце.","content":"<div class=\\"content\\"><p>Під час роботи над адаптивом сайту, нам постійно доводиться змінювати зовнішній вигляд об’єкта. У деяких випадках нам необхідно змінити порядок елементів, коли при певній ширині екрану деякий блок повинен перебувати в іншому місці HTML-структури.</p><p>Функціонал динамічного адаптива переміщає необхідний блок (на певному розширенні екрану) до іншого блоку. Переміщення відображається у розмітці HTML. Коли ширина екрану змінюється в більшу сторону, об'єкт повертається на своє місце.</p><h3>Використання функціоналу</h3><p>До блоку який потрібно перемістити додаємо атрибут <strong>data-fls-dynamic. </strong>Можна використовувати сніпет<strong> da. </strong>Підключення JS функціоналу відбудеться автоматично<strong><br><br></strong>Ось можливі значення атрибуту:</p><blockquote><p>data-fls-dynamic=\\"селектор блоку, ширина екрану, позиція, селектор батьківського блоку\\"</p></blockquote><p>Де:</p><ul><li><p><strong>селектор блоку</strong> - (обов'язково) селектор об'єкту куди треба перемістити</p></li><li><p><strong>ширина екрану - </strong>(обов'язково, за замовченням 767,98) ширина екрану при якій спрацює магія переміщення</p></li><li><p><strong>позиція - </strong>(за замовченням 0, тобто перший) позиція, яку займе переміщений об'єкт серед вже присутніх </p></li><li><p><strong>селектор батьківського блоку - </strong>селектор об'єкту в якому знаходиться <strong>селектор блоку</strong>. Використовується для<strong> </strong>уточнення місця куди треба перемістити. Якщо вказано, то компонент буде шукати <strong>селектор блоку </strong>який вкладений у<strong> селектор батьківського блоку</strong></p></li></ul></div>"},{"filename":"adaptive-menu.html","title":"Компонент \\"Адаптивне меню\\" (бургер)","cover":"adaptive-menu.jpg","date":"13.04.2025","prev":"Функціонал реагує на клік на кнопку меню “бургера” (елемент з класом icon-menu). При цьому до тега html додається атрибут data-fls-menu-open, а також спрацьовує блокування прокручування сторінки. При повторному натисканні відбуваються зворотні дії. Також, компонент містить базові стилі іконки меню та анимації відкриття. Використанн Для побудови меню та підключення функціоналу компоненту можна використовувати сніпет menu або побудувати структуру вручну або підключити готовий приклад з папки","content":"<div class=\\"content\\"><p>Функціонал реагує на клік на кнопку меню “бургера” (елемент з класом icon-menu). При цьому до тега html додається атрибут <strong>data-fls-menu-open</strong>, а також спрацьовує блокування прокручування сторінки. При повторному натисканні відбуваються зворотні дії.</p><p>Також, компонент містить базові стилі іконки меню та анимації відкриття.</p><h3>Використання</h3><p>Для побудови меню та підключення функціоналу компоненту можна використовувати сніпет <strong>menu </strong>або<strong> </strong>побудувати структуру вручну або підключити готовий приклад з папки компоненту<strong>.</strong></p><p>Код меню:</p><p>&lt;div class=\\"menu\\"&gt;<br>&lt;button type=\\"button\\" data-fls-menu class=\\"menu__icon icon-menu\\"&gt;&lt;span&gt;&lt;/span&gt;&lt;/button&gt;<br>&lt;nav class=\\"menu__body\\"&gt;<br>&lt;ul class=\\"menu__list\\"&gt;<br>&lt;li class=\\"menu__item\\"&gt;<br>&lt;a href=\\"#\\" class=\\"menu__link\\"&gt;Home&lt;/a&gt;<br>&lt;/li&gt;<br>...<br>&lt;/ul&gt;<br>&lt;/nav&gt;<br>&lt;/div&gt;</p><p>Або підключення HTML-коду меню з компоненту:</p><blockquote><p>&lt;include src=\\"@components/layout/menu/menu.html\\"&gt;&lt;/include&gt;</p></blockquote><p>Важливо щоб у кнопки відкриття меню був атрибут <strong>data-fls-menu</strong></p><p>HTML та базові стилі знаходиться в папці компоненту src/components/layout/menu/</p></div>"},{"filename":"popup.html","title":"Компонент \\"Модальне вікно\\" (popup)","cover":"popup.jpg","date":"13.04.2025","prev":"Цей функціонал додає можливість використовувати модульні (випливаючі) вікна. Робота модуля полягає в наступному: користувач натискає на вказаний елемент (за замовчюванням це атрибут із вказаним ім'ям попапу data-fls-popup-link=’popup\`s name’). При цьому до тега body додається атрибут data-fls-popup-open. Також блокується прокручування сторінки (можна вимкнути), фокусування елементів “перелітає” на popup, із запам’ятовуванням попереднього сфокусованого елемента на сторінці. Закриття popup відбувається при натисканні кнопки закриття (за замовчуванням елемент з атрибутом data-fls-popup-close), по кліку на “порожньому місці” (не на popup), за натисканням кнопки ESC. HTML/SCSS/JS файли компоненту знаходяться в папці src/components/layout/popup/","content":"<div class=\\"content\\"><p>Цей функціонал додає можливість використовувати модульні (випливаючі) вікна. Робота модуля полягає в наступному: користувач натискає на вказаний елемент (за замовчюванням це атрибут із вказаним ім'ям попапу <strong>data-fls-popup-link=’popup\`s name’</strong>). При цьому до тега <strong>body </strong>додається атрибут <strong>data-fls-popup-open</strong>. Також блокується прокручування сторінки (можна вимкнути), фокусування елементів “перелітає” на popup, із запам’ятовуванням попереднього сфокусованого елемента на сторінці. Закриття popup відбувається при натисканні кнопки закриття (за замовчуванням елемент з атрибутом <strong>data-fls-popup-close</strong>), по кліку на “порожньому місці” (не на popup), за натисканням кнопки <strong>ESC</strong>.</p><blockquote><p>HTML/SCSS/JS файли компоненту знаходяться в папці src/components/layout/popup/</p></blockquote><h3>Використання компоненту</h3><p>За допомогою include підключаємо HTML-файл компоненту до нашої HTML-сторнки (можна скористатись сніпетом pop):</p><blockquote><p>&lt;include src=\\"@components/layout/popup/popup.html\\"&gt;&lt;/include&gt;</p></blockquote><p>В файлі src/components/layout/popup/popup.html вже є базовий HTML-код одного попапу, важливо що об'єкт має атрибут <strong>data-fls-popup </strong>зі значенням <strong>popup. </strong>Це значення і є ім'ям попапу.</p><blockquote><p>Ви можете створювати ще модальні вікна надаючі їм унікальні імена</p></blockquote><p>Для того щоб виклакати відкриття того чи іншого вікна додайте об'єкту (посилання, кнопка тощо) атрибут <strong>data-fls-popup-link </strong>та в заченні вкажіть ім'я попапу який треба відкрити (можна скористатись сніпетом <strong>pl</strong>). </p><p>Наприклад по кліку на це посилання відкриється вікно з ім'ям <strong>popup</strong>:</p><blockquote><p>&lt;a href=\\"#\\" data-fls-popup-link=\\"popup\\"&gt;Popup&lt;/a&gt;</p></blockquote><h3>Додаткові можливості</h3><p>Компонент \\"Модальне вікно\\" вміє відкривати popup по хешу. Наприклад за цією адресою відкриється вікно з ім'ям <strong>popup</strong>: </p><blockquote><p><a href=\\"http://localhost:1111/\\">http://localhost:1111/</a>#popup</p></blockquote><p>Також, є можливість відкривати YouTube-відео у модальному вікні з автоматичним запуском програвання. Для цього додайте атрибут data-fls-popup-youtube, до об'єкту який відкриває попап, зі значенням ID YouTube-відео.</p><p>Наприклад, якщо YouTube-відео має ось таке посилання <a href=\\"https://www.youtube.com/watch?v=TzqNA7FoEjY\\">https://www.youtube.com/watch?v=TzqNA7FoEjY</a> то його ID це <strong>TzqNA7FoEjY. </strong>Саме цей код і вказується в атрибуті:</p><blockquote><p>&lt;a href=\\"#\\" data-fls-popup-link=\\"popup\\" data-fls-popup-youtube=\\"TzqNA7FoEjY\\"&gt;Popup&lt;/a&gt;</p></blockquote><p>Якщо ваше модальне вікно відкривається, наприклад по хешу або після відправки форми, то атрибут data-fls-popup-youtube з ID відео додайте до головного тегу попапу в файлі src/components/layout/popup/popup.html:</p><blockquote><p>&lt;div data-fls-popup=\\"popup\\" data-fls-popup-youtube=\\"TzqNA7FoEjY\\" aria-hidden=\\"true\\" class=\\"popup\\"&gt;<br>.....<br>&lt;/div&gt;</p></blockquote><p>В обох випадках відео буде інтегроване в об'єкт з атрибутом <strong>data-fls-popup-content </strong>з заміною усього вмісту,<strong> </strong>якщо виникає потреба вивести відео в якомусь іншому місці модального вікна, створіть об'єкт і додайте йому атрибут data-fls-popup-youtube-place</p><h3>Методи та події</h3><p><strong>Методи</strong></p><p>Для того щоб викликати той чи інший метод компонента звертайтесь до нього через глобальну змінну <strong>window.flsPopup.</strong></p><p>Наприклад, наступне звернення відкриє попап з ім'ям popup:</p><blockquote><p>window.flsPopup.open('popup')</p></blockquote><p><strong>Події</strong></p><p>У класі попапів існує ряд подій:</p><ul><li><p><strong>beforePopupOpen</strong> – спрацює перед відкриттям попапа</p></li><li><p><strong>afterPopupOpen</strong> – спрацює після відкриття попапа</p></li><li><p><strong>beforePopupClose</strong> – спрацює перед відкриттям попапа</p></li><li><p><strong>afterPopupClose</strong> – спрацює після відкриття попапа</p></li></ul><p>Щоб працювати з подією вішаємо прослуховування на document</p><blockquote><p>document.addEventListener(\\"afterPopupOpen\\", function (e) { <br>// Попап<br> const currentPopup = e.detail.popup;<br>})</p></blockquote></div>"},{"filename":"observer.html","title":"Компонент \\"Спостерігач\\"","cover":"observer.jpg","date":"13.04.2025","prev":"Компонент “Спостерігач” можна використовувати для вирішення різних завдань: анімація елементів при скролі, підсвічування активного пункту меню (використовується в компоненті “СкролДо”) та багатьох інших. Суть роботи спостерігача полягає в додаванні класу --watcher-view елементу в момент його появи у в’юпорті (екрані) при скролі та при відкритті сторінки. І, відповідно, прибраний при відході об’єкта з в’юпорту.","content":"<div class=\\"content\\"><p>Компонент “Спостерігач” можна використовувати для вирішення різних завдань: анімація елементів при скролі, підсвічування активного пункту меню (використовується в компоненті “СкролДо”) та багатьох інших.</p><p>Суть роботи спостерігача полягає в додаванні класу <strong>--watcher-view</strong> елементу в момент його появи у в’юпорті (екрані) при скролі та при відкритті сторінки. І, відповідно, прибраний при відході об’єкта з в’юпорту.</p><h3>Використання компонента</h3><p>Для того щоб \\"Спостерігач\\" почав стежити за об'єктом, додайте йому атрибут <strong>data-fls-watcher</strong></p><blockquote><p>&lt;div <strong>data-fls-watcher</strong> class=\\"block\\"&gt; ... &lt;/div&gt;</p></blockquote><p><strong>Додаткові налаштування:</strong></p><ul><li><p><strong>data-fls-watcher-root=’селектор’</strong> – селектор батька всередині якого спостерігатиме за об’єктом. За замовчуванням &lt;body&gt;</p></li><li><p><strong>data-fls-watcher-margin=’значення’ </strong>– відступ від батька. Вказуємо значення у PX або у %</p></li><li><p><strong>data-fls-watcher-threshold=’значення’</strong> – відсоток показу об’єкта для спрацьовування. Де 1 = 100% показ об’єкта. Вказуємо лише цілі чи десяткові числа, за замовчуванням 0. Може містити масив значень через кому.</p></li><li><p><strong>data-fls-watcher-once</strong> – спостерігати лише один раз. Тобто клас до об’єкта додасться тільки один раз і не буде прибраний при виході з в’юпорту.</p></li></ul><p>Приклад – клас додасться лише один раз, з появою об’єкта на 50% його висоти:</p><blockquote><p>&lt;div data-watch-threshold=\\"0.5\\" data-watch-once data-watch class=\\"block\\"&gt; ... &lt;/div&gt;</p></blockquote><h3>Події</h3><p>Після кожного спрацювання спостерігача виникає подія <strong>watcherСallback</strong>, його можна відловити в будь-якій частині коду:</p><blockquote><p>document.addEventListener(\\"watcherCallback\\", function (e) { <br>// Повна інформація від спостерігача <br>const entry = e.detail.entry<br>// Спостерігаємий об'єкт <br>const targetElement = entry.target<br>})</p></blockquote></div>"},{"filename":"scroll-to.html","title":"Компонент \\"СкролДо\\". Плавна навігація по сторінці.","cover":"scroll-to.jpg","date":"13.04.2025","prev":"У цьому компоненті реалізований плавний скрол після натискання на посилання (кнопці) до потрібного блоку на сторінці. Якщо у адресі сторінки буде передано хеш і блок з таким селектором буде знайдено на сторінці, прокручування до блоку відбудеться автоматично. Також модуль дозволяє побудувати навігацію по сторінці з додаванням класу поточному пункту навігації (пункту меню) при скроллі до певного блоку. Використання компоненту До елементів навігації (пунктів меню), або до довільного","content":"<div class=\\"content\\"><p>У цьому компоненті реалізований плавний скрол після натискання на посилання (кнопці) до потрібного блоку на сторінці. Якщо у адресі сторінки буде передано хеш і блок з таким селектором буде знайдено на сторінці, прокручування до блоку відбудеться автоматично. Також модуль дозволяє побудувати навігацію по сторінці з додаванням класу поточному пункту навігації (пункту меню) при скроллі до певного блоку.</p><h3>Використання компоненту</h3><p>До елементів навігації (пунктів меню), або до довільного об’єкта, додаємо HTML-атрибут <strong>data-fls-scrollto</strong>, а в якості значення вказуємо CSS селектор блоку до якого потрібно прокрутити:</p><blockquote><p>&lt;a href=\\"#\\" data-fls-scrollto=\\".ім'я класу блоку\\" class=\\"link\\"&gt;Пункт навігаціі&lt;/a&gt; <br>&lt;a href=\\"#\\" data-fls-scrollto=\\"#id блоку\\" class=\\"link\\"&gt;Пункт навігаціі&lt;/a&gt;</p></blockquote><p>Якщо потрібно, щоб скролл враховував шапку (не докручував на висоту шапки, використовується при фіксованих шапках) потрібно додати до об’єкта навігації атрибут <strong>data-fls-scrollto-header</strong>:</p><blockquote><p>&lt;a href=\\"#\\" data-fls-scrollto-header data-fls-scrollto=\\".ім'я класу блоку\\" class=\\"link\\"&gt;Пункт навігаціі&lt;/a&gt;</p></blockquote><p>Якщо потрібно, щоб скрол не докручував до блоку на вказану висоту, необхідно додати до об’єкта навігації атрибут <strong>data-fls-scrollto-top</strong>, а в якості значення вказати число – необхідну висоту:</p><blockquote><p>&lt;a href=\\"#\\" data-fls-scrollto-top=\\"30\\" data-fls-scrollto=\\"#id блоку\\" class=\\"link\\"&gt;Пункт навігаціі&lt;/a&gt;</p></blockquote><h3>Додавання класу до поточного пункту навігації</h3><p>Для включення функціоналу додавання класу необхідно задіяти <a href=\\"observer.html\\">компонент \\"спостерігач\\"</a>.</p><p>Тож для секцій, при появі яких буде додаватись клас до відповідного пункту навігації, додаємо атрибут <strong>data-fls-watcher</strong> зі значенням <strong>navigator:</strong></p><p>&lt;a href=\\"#\\" data-fls-scrollto=\\".some-section\\" class=\\"link\\"&gt;Пункт навігаціі&lt;/a&gt; <br>...<br> &lt;section <strong>data-fls-watcher</strong>=\\"navigator\\" class=\\"some-section\\"&gt;&lt;/section&gt;</p><p>Після цього, при прокручуванні до об’єкту навігації, до відповідного пункту навігації буде додано клас <strong>--navigator-active.</strong> А коли об'єкт зникає з в'юпорта, клас прибиреться.</p><h3>Прокручування до потрібного блоку по хешу (при відкритті сторінки)</h3><p>Для того щоб прокрутити сторінку до потрібного блоку при відкритті сторінки необхідно додати до адреси хеш, що містить <strong>ім’я класу потрібного блоку</strong>.</p><p><em>Приклад адресного рядка та потрібного блоку:</em></p><blockquote><p><a href=\\"https://fls.guru/index.html\\">https://fls.guru/index.html</a>#some-section</p></blockquote><blockquote><p>&lt;section class=\\"some-section\\"&gt; ... &lt;/section&gt;</p></blockquote><p></p></div>"},{"filename":"show-more.html","title":"Компонент “Показати ще”","cover":"show-more.jpg","date":"15.04.2025","prev":"Компонент “Показати ще” дозволяє спочатку приховати частину тексту або елементів списку, показуючи тільки вказану висоту або кількість елементів. Є можливість включати функціонал на певній ширині екрану (брейкпоінті). Розташування компоненту Файли компоненту знаходяться в папці src/components/layout/showmore, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту.","content":"<div class=\\"content\\"><p>Компонент “Показати ще” дозволяє спочатку приховати частину тексту або елементів списку, показуючи тільки вказану висоту або кількість елементів. Є можливість включати функціонал на певній ширині екрану (брейкпоінті).</p><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/layout/showmore, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту.</p><h3>Використання компоненту</h3><p>У потрібному місці викликати сніпет <strong>showmore</strong> (класи замінити на потрібні). Або вручну створити структуру де для оболонки доданий атрибут <strong>data-fls-showmore</strong>, для дочірнього елемента <strong>data-fls-showmore-content</strong> і кнопки <strong>data-fls-showmore-button</strong>. Кнопку спочатку потрібно приховати додавши атрибут <strong>hidden </strong>і додати два теги &lt;span&gt; з текстом показу та приховування контенту:</p><blockquote><p>&lt;div data-fls-showmore class=\\"block\\"&gt; <br>&lt;div data-fls-showmore-content class=\\"block__content\\"&gt;&lt;/div&gt; <br>&lt;button hidden data-fls-showmore-button type=\\"button\\" class=\\"block__more\\"&gt; &lt;span&gt;Показати ще&lt;/span&gt; &lt;span&gt;Приховати&lt;/span&gt; &lt;/button&gt; <br>&lt;/div&gt;</p></blockquote><p>До елемента з атрибутом <strong>data-fls-showmore-content</strong> додаємо текст та інший контент, або якщо це список (UL/OL) елементи списку (LI).</p><p>Залежно від того, який контент використовується (текст або елементи списку), вказуємо значення для атрибута <strong>data</strong>-fls<strong>-showmore</strong>:</p><ul><li><p><strong>size</strong> – обмеження по висоті блоку (за замовчуванням)</p></li><li><p><strong>items</strong> – обмеження кількості виведених елементів списку</p></li></ul><blockquote><p>&lt;div data-fls-showmore=\\"items\\" class=\\"block\\"&gt; <br>&lt;ul data-fls-showmore-content class=\\"block__content\\"&gt;<br> &lt;li&gt;Пункт №1&lt;/li&gt;<br> &lt;li&gt;Пункт №2&lt;/li&gt; <br>&lt;li&gt;Пункт №3&lt;/li&gt; <br>&lt;li&gt;Пункт №4&lt;/li&gt; <br>&lt;li&gt;Пункт №5&lt;/li&gt; <br>&lt;/ul&gt;<br> &lt;button hidden data-fls-showmore-button type=\\"button\\" class=\\"block__more\\"&gt; &lt;span&gt;Показати ще&lt;/span&gt; &lt;span&gt;Приховати&lt;/span&gt; &lt;/button&gt; <br>&lt;/div&gt;</p></blockquote><p>Залежно від того, який тип обрано, вказуємо значення для атрибуту <strong>data-fls-showmore-content </strong>:</p><ul><li><p><strong>Висота блоку у пікселях</strong> (число без px, за замовчуванням 150)</p></li><li><p><strong>Кількість виведених</strong> <strong>елементів списку </strong>(число, за замовчуванням 3 )</p></li></ul><blockquote><p>&lt;div data-fls-showmore class=\\"block\\"&gt; <br>&lt;div data-fls-showmore-content=\\"200\\" class=\\"block__content\\"&gt; Lorem ipsum dolor sit amet consectetur, adipisicing elit. Blanditiis explicabo voluptates magni culpa, perferendis vel quam consequuntur possimus, vero placeat quo enim obcaecati quas, veritatis magnam non. Architecto, porro voluptatum? <br>&lt;/div&gt; <br>&lt;button hidden data-fls-showmore-button type=\\"button\\" class=\\"block__more\\"&gt; &lt;span&gt;Показати ще&lt;/span&gt; &lt;span&gt;Приховати&lt;/span&gt; &lt;/button&gt; <br>&lt;/div&gt;</p></blockquote><p>Якщо контент буде меншим, ніж зазначене обмеження, кнопка “Показати ще” <strong>не буде показана</strong>. В іншому випадку, контент обмежиться за висотою або за кількістю елементів і при натисканні на кнопку буде показаний повністю, також, до елемента з атрибутом <strong>data-fls-showmore</strong> додасться клас <strong>--showmore-active</strong> (перший спан в кнопці буде прихований, а другий показаний). Повторний клік поверне обмеження.</p><p>Є можливість керувати швидкістю розгортання контенту, для цього слід вказати значення атрибуту <strong>data-fls-showmore-button</strong> у мілісекундах (за замовчуванням 500):</p><blockquote><p>&lt;div data-fls-showmore class=\\"block\\"&gt; <br>&lt;div data-fls-showmore-content=\\"200\\" class=\\"block__content\\"&gt; Lorem ipsum dolor sit amet consectetur, adipisicing elit. Blanditiis explicabo voluptates magni culpa, perferendis vel quam consequuntur possimus, vero placeat quo enim obcaecati quas, veritatis magnam non. Architecto, porro voluptatum?<br> &lt;/div&gt; <br>&lt;button hidden data-fls-showmore-button=\\"1000\\" type=\\"button\\" class=\\"block__more\\"&gt; &lt;span&gt;Показати ще&lt;/span&gt; &lt;span&gt;Приховати&lt;/span&gt; &lt;/button&gt;<br> &lt;/div&gt;</p></blockquote><p><strong>Увімкнення функціоналу на певній ширині екрану</strong></p><p>Для того щоб використовувати функціонал на певній ширині екрана, до об’єкта з атрибутом <strong>data-fls-showmore</strong> додаємо атрибут <strong>data-fls-showmore-media</strong> де, через кому, вказуємо потрібну ширину, а також тип:</p><ul><li><p><strong>max</strong> (за замовчуванням) – функціонал увімкнеться на ширині меншій ніж зазначена</p></li><li><p><strong>min</strong> – функціонал увімкнеться на ширині більшій ніж зазначена</p></li></ul><blockquote><p>&lt;div data-fls-showmore data-fls-showmore-media=\\"768,min\\" class=\\"block\\"&gt; <br>&lt;div data-fls-showmore-content=\\"200\\" class=\\"block__content\\"&gt; Lorem ipsum dolor sit amet consectetur, adipisicing elit. Blanditiis explicabo voluptates magni culpa, perferendis vel quam consequuntur possimus, vero placeat quo enim obcaecati quas, veritatis magnam non. Architecto, porro voluptatum?<br> &lt;/div&gt; <br>&lt;button hidden data-fls-showmore-button=\\"1000\\" type=\\"button\\" class=\\"block__more\\"&gt; &lt;span&gt;Показати ще&lt;/span&gt; &lt;span&gt;Приховати&lt;/span&gt; &lt;/button&gt;<br> &lt;/div&gt;</p></blockquote></div>"},{"filename":"tabs.html","title":"Компонент \\"Таби\\"","cover":"tabs.jpg","date":"15.04.2025","prev":"Таби – це заголовки та відповідні їм блоки. Як правило, за замовчуванням відкритий лише один блок, інші приховані. При натисканні на заголовок показується відповідний блок. Основні можливості Використання безлічі блоків з табами Відкриття потрібного таба з хешу Перетворення табів на спойлери на вказаній ширині екрана (зручно для адаптива) Можливість анімованого відкриття табів Семантика","content":"<div class=\\"content\\"><p>Таби – це заголовки та відповідні їм блоки. Як правило, за замовчуванням відкритий лише один блок, інші приховані. При натисканні на заголовок показується відповідний блок.</p><h3>Основні можливості</h3><ul><li><p>Використання безлічі блоків з табами</p></li><li><p>Відкриття потрібного таба з хешу</p></li><li><p>Перетворення табів на спойлери на вказаній ширині екрана (зручно для адаптива)</p></li><li><p>Можливість анімованого відкриття табів</p></li><li><p>Семантика</p></li></ul><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/layout/tabs, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту.</p><h3>Використання компоненту</h3><p>У потрібному місці викликати сніпет<strong> tabs</strong> (класи можна замінити на потрібні). Або вручну створити структуру із відповідними дата-атрибутами. Зверніть увагу, що додавання класу <strong>--tab-active</strong> для заголовка таба зробить таб активним (відкритим)</p><p><em>Приклад блоку з трьома табами:</em></p><blockquote><p>&lt;div data-fls-tabs class=\\"tabs\\"&gt;<br>&lt;nav data-fls-tabs-titles class=\\"tabs__navigation\\"&gt;<br>&lt;button type=\\"button\\" class=\\"tabs__title --tab-active\\"&gt;Таб №1&lt;/button&gt;<br>&lt;button type=\\"button\\" class=\\"tabs__title\\"&gt;Таб №2&lt;/button&gt;<br>&lt;button type=\\"button\\" class=\\"tabs__title\\"&gt;Таб №3&lt;/button&gt;<br>&lt;/nav&gt;<br>&lt;div data-fls-tabs-body class=\\"tabs__content\\"&gt;<br>&lt;div class=\\"tabs__body\\"&gt;Вміст першого таба&lt;/div&gt;<br>&lt;div class=\\"tabs__body\\"&gt;Вміст другого таба&lt;/div&gt;<br>&lt;div class=\\"tabs__body\\"&gt;Вміст третього таба&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;</p></blockquote><p><strong>Перетворення табів на спойлери</strong></p><p>Для того, щоб таби перетворювалися на спойлери, необхідно для елемента з атрибутом <strong>data-fls-tabs </strong>вказати значення ширини екрана нижче якої відбудеться перетворення:</p><blockquote><p>&lt;div data<strong>-fls</strong>-tabs=\\"768\\" class=\\"tabs\\"&gt; ... &lt;/div&gt;</p></blockquote><p>У момент перетворення, до об’єкта з атрибутом <strong>data-tabs</strong> додасться клас <strong>--tab-spolle</strong>r, яким можна змінити стилі для нового представлення табов-спойлеров.</p><p><strong>Відкриття потрібного таба по хешу</strong></p><p>Якщо є необхідність відкривати конкретний таб у конкретному блоці табів при відкритті сторінки по хешу, необхідно для елемента з атрибутом <strong>data-fls-tabs</strong> додати атрибут <strong>data-fls-tabs-hash</strong>:</p><blockquote><p>&lt;div data<strong>-fls</strong>-tabs data<strong>-fls</strong>-tabs-hash class=\\"tabs\\"&gt; ... &lt;/div&gt;</p></blockquote><p>Тепер, при натисканні на заголовки табів, до адреси сторінки додаватиметься хеш виду: #tab-0-1, де 0 – це ідентифікатор блоку з табами, а 1 – ідентифікатор таба в цьому блоці.</p><p>Відповідно, перейшовши на сторінку з хешем #tab-0-1, відкриється другий таб у першому блоці з табами. При #tab-2-0 відкриється перший таб у третьому блоці з табами і так далі.</p><p><strong>Анімація при відкритті таба</strong></p><p>Для того, щоб таби відкривалися плавно, необхідно об’єкту з атрибутом <strong>data-fls-tabs</strong>, додати атрибут <strong>data-fls-tabs-animate</strong>, а в якості значення вказати кількість мілісекунд, за які відкриється таб (за замовчуванням 500).</p><blockquote><p>&lt;div data<strong>-fls</strong>-tabs data<strong>-fls</strong>-tabs-animate=\\"1000\\" class=\\"tabs\\"&gt; ... &lt;/div&gt;</p></blockquote><p></p></div>"},{"filename":"spollers.html","title":"Компонент \\"Спойлери\\"","cover":"spollers.jpg","date":"15.04.2025","prev":"Спойлер – це заголовок, при натисканні на який під ним розгортається певний контент. Основні можливості Використання безлічі блоків зі спойлерами Вимкнення/увімкнення функціоналу на певній ширині екрану Функція “акордеон”, коли в блоці може бути відкритий лише один спойлер Можливість закриття по кліку за межами спойлера Можливість анімованого відкриття Семантика та доступність Розташування компоненту Файли компоненту знаходяться в папці src/components/layout/spollers, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту.","content":"<div class=\\"content\\"><p>Спойлер – це заголовок, при натисканні на який під ним розгортається певний контент.</p><h3>Основні можливості</h3><ul><li><p>Використання безлічі блоків зі спойлерами</p></li><li><p>Вимкнення/увімкнення функціоналу на певній ширині екрану</p></li><li><p>Функція “акордеон”, коли в блоці може бути відкритий лише один спойлер</p></li><li><p>Можливість закриття по кліку за межами спойлера</p></li><li><p>Можливість анімованого відкриття</p></li><li><p>Семантика та доступність</p></li></ul><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/layout/spollers, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту.</p><h3>Використання компоненту</h3><p>У потрібному місці викликати сніпет<strong> spollers</strong> (класи можна замінити на потрібні). Або вручну створити структуру із відповідними дата-атрибутами. Зауважте, що додавання атрибуту <strong>data-fls-open</strong> для елемента <strong>details</strong> зробить спойлер активним (відкритим).</p><p><em>Приклад блоку з двома спойлерами:</em></p><blockquote><p>&lt;div data-fls-spollers class=\\"spollers\\"&gt;<br>&lt;details class=\\"spollers__item\\"&gt;<br>&lt;summary class=\\"spollers__title\\"&gt;Заголовок спойлера&lt;/summary&gt;<br>&lt;div class=\\"spollers__body\\"&gt;Контент спойлера #1&lt;/div&gt;<br>&lt;/details&gt;<br>&lt;details class=\\"spollers__item\\"&gt;<br>&lt;summary class=\\"spollers__title\\"&gt;Заголовок спойлера #2&lt;/summary&gt;<br>&lt;div class=\\"spollers__body\\"&gt;Контент спойлера&lt;/div&gt;<br>&lt;/details&gt;<br>&lt;/div&gt;</p></blockquote><p>У момент ініціалізації (увімкнення) функціонала спойлера контент буде прихований, а до елемента з атрибутом <strong>data-fls-spollers</strong> буде додано клас <strong>--spoller-init</strong></p><p><strong>Вимкнення/увімкнення функціоналу на певній ширині екрану</strong></p><p>Для того, щоб вимкнути/включити функціонал спойлера на певній ширині екрана, необхідно для атрибуту <strong>data-fls-spollers</strong> через кому вказати потрібну ширину екрану а також тип:</p><ul><li><p><strong>max</strong> (за замовчуванням) — функціонал увімкнеться на ширині меншій за вказану</p></li><li><p><strong>min</strong> — функціонал увімкнеться на ширині більшій ніж зазначена</p></li></ul><blockquote><p>&lt;div data<strong>-fls</strong>-spollers=\\"768,min\\" class=\\"spollers\\"&gt; ... &lt;/div&gt;</p></blockquote><p><strong>Увімкнення режиму “акордеон”</strong></p><p>Для того, щоб увімкнути режим акордеон, необхідно для елемента з атрибутом <strong>data-fls-spollers</strong> додати атрибут <strong>data-fls-spollers-one</strong></p><blockquote><p>&lt;div data<strong>-fls</strong>-spollers data-fls-spollers-one class=\\"spollers\\"&gt; ... &lt;/div&gt;</p></blockquote><p>Тепер, при відкритті спойлера, інший відкритий спойлер у блоці закриватиметься</p><p><strong>Управління швидкістю анімації</strong></p><p>Для того, щоб керувати часом анімації відкриття/закриття спойлера, необхідно для елемента з атрибутом <strong>data-fls-spollers</strong> додати атрибут <strong>data-fls-spollers-speed</strong>, а в якості значення вказати час анімації в мілісекундах (за замовчуванням 500).</p><blockquote><p>&lt;div data<strong>-fls</strong>-spollers data<strong>-fls</strong>-spollers-speed=\\"1000\\" class=\\"spollers\\"&gt; ... &lt;/div&gt;</p></blockquote><p><strong>Закриття при кліку поза спойлером</strong></p><p>Якщо необхідно закривати спойлер(и) при кліку поза блоком (“на порожньому місці”), слід додати потрібному заголовку(кам) атрибут <strong>data-fls-spollers-close</strong></p><blockquote><p>&lt;div data<strong>-fls</strong>-spollers class=\\"spollers\\"&gt; <br>&lt;details class=\\"spollers__item\\"&gt; <br>&lt;summary data<strong>-fls</strong>-spollers-close class=\\"spollers__title\\"&gt;Заголовок спойлера&lt;/summary&gt; <br>&lt;div class=\\"spollers__body\\"&gt;Контент спойлера&lt;/div&gt; <br>&lt;/details&gt;<br>&lt;/div&gt;</p></blockquote><p><strong>Прокрутка до заголовку</strong></p><p>Якщо необхідно прокрутити скрол до заголовку відкритого спойлеру, слід додати потрібному елементу (тег details) атрибут <strong>data-fls-spollers-scroll</strong></p><blockquote><p>&lt;div data<strong>-fls</strong>-spollers class=\\"spollers\\"&gt;<br>&lt;details data-fls-spollers-scroll class=\\"spollers__item\\"&gt; <br>&lt;summary class=\\"spollers__title\\"&gt;Заголовок спойлера&lt;/summary&gt; <br>&lt;div class=\\"spollers__body\\"&gt;Контент спойлера&lt;/div&gt; <br>&lt;/details&gt; <br>&lt;/div&gt;</p></blockquote><p>Є можливість більш тонких налаштувань. Наприклад, якщо треба щоб скрол враховув шапку сайту (коли вона фіксована), то варто додати атрибут <strong>data-fls-spollers-scroll-noheader</strong>.</p><p>Також, в самому атрибуті <strong>data-fls-spoller-scroll</strong> можна дописати числове значення яке буде враховане при скролі:</p><blockquote><p>&lt;div data<strong>-fls</strong>-spollers class=\\"spollers\\"&gt; <br>&lt;details data<strong>-fls</strong>-spollers-scroll=\\"20\\" data<strong>-fls</strong>-spollers-scroll-noheader class=\\"spollers__item\\"&gt;<br>&lt;summary class=\\"spollers__title\\"&gt;Заголовок спойлера&lt;/summary&gt; <br>&lt;div class=\\"spollers__body\\"&gt;Контент спойлера&lt;/div&gt; <br>&lt;/details&gt; <br>&lt;/div&gt;</p></blockquote></div>"},{"filename":"beforeafter.html","title":"Компонент “До/Після”","cover":"beforeafter.jpg","date":"15.04.2025","prev":"Компонент “До/Після” – це вивід 2х зображень, з можливістю, перетаскуючи роздиляючу, лінію відобразити одне або друге зображення. Розташування компоненту Файли компоненту знаходяться в папці src/components/layout/beforeafter, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту. Використання компоненту В HTML, у потрібному місці, викликати сніпет ba (класи можна замінити на потрібні). Або вручну створити структуру із відповідними дата-атрибутами.","content":"<div class=\\"content\\"><p>Компонент “До/Після” – це вивід 2х зображень, з можливістю, перетаскуючи роздиляючу, лінію відобразити одне або друге зображення.</p><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/layout/beforeafter, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту.</p><h3>Використання компоненту</h3><p>В HTML, у потрібному місці, викликати сніпет<strong> ba</strong> (класи можна замінити на потрібні). Або вручну створити структуру із відповідними дата-атрибутами.</p><blockquote><p>&lt;div data-fls-beforeafter class=\\"before-after\\"&gt;<br>&lt;div data-fls-beforeafter-before class=\\"before-after__item\\"&gt;...&lt;/div&gt;<br>&lt;div data-fls-beforeafter-after class=\\"before-after__item\\"&gt;...&lt;/div&gt;<br>&lt;div data-fls-beforeafter-arrow class=\\"before-after__arrow\\"&gt;&lt;/div&gt;<br>&lt;/div&gt;</p></blockquote><p>За допомогою тегу IMG додайте забраження у відповідні HTML-елементи, додайте необхідну стилізацію для розділяючої лінії data-fls-beforeafter-arrow</p><blockquote><p>&lt;div data-fls-beforeafter class=\\"before-after\\"&gt;<br>&lt;div data-fls-beforeafter-before class=\\"before-after__item\\"&gt;<br>&lt;img src=\\"@img/image-1.jpg\\" alt=\\"Image\\"&gt;<br>&lt;/div&gt;<br>&lt;div data-fls-beforeafter-after class=\\"before-after__item\\"&gt;<br>&lt;img src=\\"@img/image-2.jpg\\" alt=\\"Image\\"&gt;<br>&lt;/div&gt;<br>&lt;div data-fls-beforeafter-arrow class=\\"before-after__arrow\\"&gt;&lt;/div&gt;<br>&lt;/div&gt;</p></blockquote></div>"},{"filename":"gallery.html","title":"Компонент “Галерея”","cover":"gallery.jpg","date":"15.04.2025","prev":"Функціонал підключає галерею (LightGallery). При натисканні на зображення картинки повне зображення відкривається з можливістю слайд-шоу. Можна створювати як вбудовані, так і лайтбокс-галереї (в правому куті розташовується ряд кнопок (налаштовується) для розширених функцій. Наприклад: “Закрити слайд-шоу”, “Завантаження зображення” та ін. Галерея, підтримує як прості зображення, так і відео чи фрейми. Для роботи галереї необхідні зображення (відеофайли) у двох форматах: мініатюри – зображення невеликого розміру, які використовуються для попереднього перегляду та зображення повного розміру – необхідні для детального перегляду.","content":"<div class=\\"content\\"><p>Функціонал підключає галерею (<a href=\\"https://www.lightgalleryjs.com\\">LightGallery</a>). При натисканні на зображення картинки повне зображення відкривається з можливістю слайд-шоу. Можна створювати як вбудовані, так і лайтбокс-галереї (в правому куті розташовується ряд кнопок (налаштовується) для розширених функцій. Наприклад: “Закрити слайд-шоу”, “Завантаження зображення” та ін. Галерея, підтримує як прості зображення, так і відео чи фрейми.</p><p>Для роботи галереї необхідні зображення (відеофайли) у двох форматах: мініатюри – зображення невеликого розміру, які використовуються для попереднього перегляду та зображення повного розміру – необхідні для детального перегляду.</p><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/layout/gallery, тут ви знайдете JS-файл компоненту з базовоми налаштуваннями, HTML-файл з прикладом коду, а також папку assets з CSS-файлами компоненту.</p><h3>Використання компоненту</h3><p>В HTML<strong>, </strong>До тегу батька об’єктів галереї, додаємо дата-атрибут <strong>data-fls-gallery</strong>.</p><blockquote><p>&lt;div data-fls-gallery class=\\"gallery\\"&gt; .... &lt;/div&gt;</p></blockquote><p>Сам об’єкт галереї складаються з такої конструкції (тег для повного розміру зображення і всередині тег для превью). Наприклад, можна використовувати таку розмітку:</p><blockquote><p>&lt;div data-fls-gallery class=\\"gallery\\"&gt; <br>&lt;a href=\\"img/img-full-1.jpg\\" class=\\"gallery__image\\"&gt; <br>&lt;img alt=\\"Превью\\" src=\\"img/img-thumb-1.jpg\\" class=\\"gallery__preview\\"&gt;<br>&lt;/a&gt; <br>&lt;a href=\\"img/img-full-2.jpg\\" class=\\"gallery__image\\"&gt; <br>&lt;img alt=\\"Превью\\" src=\\"img/img-thumb-2.jpg\\" class=\\"gallery__preview\\"&gt; <br>&lt;/a&gt; <br>... <br>&lt;/div&gt;</p></blockquote><p>Для більш широкого використання можливостей компоненту галереї, дивіться <a href=\\"https://www.lightgalleryjs.com/docs/getting-started/\\">документацію LiteGallery</a></p></div>"},{"filename":"masonry.html","title":"Компонент \\"Масонрі сітка\\"","cover":"masonry.jpg","date":"15.04.2025","prev":"Масонрі сітка - це специфічний вивід елементів таким чином, що вони заповнюють усе місце в структурних колонках. Приклад: вивід зображень на Pinterest В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 реалізована можливість побудови масонрі сітки на основі Isotope. Що дозволяє не тільки виводити елементи у вигляді масонрі сітки, а й додавати функціонал фільтрації, сортування тощо","content":"<div class=\\"content\\"><p>Масонрі сітка - це специфічний вивід елементів таким чином, що вони заповнюють усе місце в структурних колонках. Приклад: <a href=\\"https://www.pinterest.com/\\">вивід зображень на Pinterest</a></p><p>В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 реалізована можливість побудови масонрі сітки на основі <a href=\\"https://isotope.metafizzy.co/\\">Isotope</a>. Що дозволяє не тільки виводити елементи у вигляді масонрі сітки, а й додавати функціонал фільтрації, сортування тощо</p><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/layout/masonry, тут ви знайдете JS-файл компоненту з базовоми налаштуваннями та функціоналом фільтрації, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту</p><h3>Використання компоненту</h3><p>У потрібному місці HTML-файту, ви можете скористатись сніпетом<strong> masonry</strong>, або вручну створити структуру із відповідними дата-атрибутами:</p><blockquote><p>&lt;div data-fls-masonry class=\\"masonry\\"&gt;<br>&lt;div data-fls-masonry-item class=\\"masonry__item\\"&gt;A&lt;/div&gt;<br>&lt;div data-fls-masonry-item class=\\"masonry__item\\"&gt;B&lt;/div&gt;<br>&lt;div data-fls-masonry-item class=\\"masonry__item\\"&gt;C&lt;/div&gt;<br>&lt;/div&gt;</p></blockquote><p>Ось приклад масонрі сітки з можливістю фільтрації:</p><blockquote><p>&lt;div class=\\"masonry\\"&gt;<br>&lt;ul class=\\"masonry__filter filter-masonry\\"&gt;<br>&lt;li class=\\"filter-masonry__item\\"&gt;&lt;a href=\\"#\\" data-fls-masonry-filter-link=\\"*\\" class=\\"filter-masonry__link\\"&gt;Усі&lt;/a&gt;&lt;/li&gt;<br>&lt;li class=\\"filter-masonry__item\\"&gt;&lt;a href=\\"#\\" data-fls-masonry-filter-link=\\"a\\" class=\\"filter-masonry__link\\"&gt;Фільтр А&lt;/a&gt;&lt;/li&gt;<br>&lt;li class=\\"filter-masonry__item\\"&gt;&lt;a href=\\"#\\" data-fls-masonry-filter-link=\\"b\\" class=\\"filter-masonry__link\\"&gt;Фільтр B&lt;/a&gt;&lt;/li&gt;<br>&lt;li class=\\"filter-masonry__item\\"&gt;&lt;a href=\\"#\\" data-fls-masonry-filter-link=\\"c\\" class=\\"filter-masonry__link\\"&gt;Фільтр C&lt;/a&gt;&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;div data-fls-masonry class=\\"masonry__items\\"&gt;<br>&lt;div data-fls-masonry-item data-fls-masonry-filter=\\"a\\" class=\\"masonry__item\\"&gt;A&lt;/div&gt;<br>&lt;div data-fls-masonry-item data-fls-masonry-filter=\\"b\\" class=\\"masonry__item\\"&gt;B&lt;/div&gt;<br>&lt;div data-fls-masonry-item data-fls-masonry-filter=\\"c\\" class=\\"masonry__item\\"&gt;C&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;</p></blockquote><p>Для більш широкого використання можливостей компоненту, дивіться <a href=\\"https://isotope.metafizzy.co/\\">документацію Isotop</a></p></div>"},{"filename":"slider.html","title":"Компонент \\"Слайдер\\"","cover":"slider.jpg","date":"17.04.2025","prev":"У шаблоні “Чертоги Фрілансера” 4, далі ЧФ 4, є підготовка до роботи з слайдером Swiper. Розташування компоненту Файли компоненту знаходяться в папці src/components/layout/slider, тут ви знайдете JS-файл компоненту з ініціалізацією та базовими налаштуваннями, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту. Використання компоненту Існує два сніпети для побудови HTML-структури слайдера:","content":"<div class=\\"content\\"><p>У шаблоні “Чертоги Фрілансера” 4, далі ЧФ 4, є підготовка до роботи з <a href=\\"https://swiperjs.com/\\">слайдером Swiper</a>.</p><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/layout/slider, тут ви знайдете JS-файл компоненту з ініціалізацією та базовими налаштуваннями, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту.</p><h3>Використання компоненту</h3><p>Існує два сніпети для побудови HTML-структури слайдера:</p><ul><li><p><strong>swiper</strong> – будує мінімальну структуру з уже доданими класами слайдера (для досвідченіших)</p></li><li><p><strong>swiperfull</strong> – будує повну структуру слайдера з додаванням всіх можливих елементів керування (кнопки “ліворуч/праворуч”, скролл, пагінація (булети)) з уже доданими класами слайдера. Весь код супроводжується коментарями (для новачків).</p></li></ul><p>У файлі src/components/layout/slider/<strong>slider.js</strong> виконується підключення самого слайдера “Swiper” з пакета NPM (підключено за замовчуванням)</p><blockquote><p>import Swiper, { Navigation } from 'swiper';</p></blockquote><p>При необхідності можна підключити більше потрібних модулів:</p><blockquote><p>import Swiper, { Navigation, Pagination, Lazy, Autoplay } from 'swiper';</p></blockquote><p>Повний перелік модулів – <a href=\\"https://swiperjs.com/swiper-api#using-js-modules\\">тут</a></p><p>Також, нижче за кодом, є приклад-підготовка для створення конкретного слайдера (функція <strong>initSliders();</strong>) Тут ми створюємо та налаштовуємо потрібні нам слайдери, не забуваємо вказувати модулі для конкретного слайдера</p><blockquote><p>new Swiper('.swiper', { modules: [Navigation, Autoplay], ... }</p></blockquote><p>Інформацію з налаштування дивись у <a href=\\"https://swiperjs.com/swiper-api\\">документаціі</a> на сайті слайдера.</p><p>Ініціалізація слайдера(ів)<strong> initSliders();</strong> відбувається після повного завантаження сторінки нижче за кодом:</p><blockquote><p>window.addEventListener(\\"load\\", initSliders)</p></blockquote><p>За замовчуванням, у файлі<strong> </strong>src/components/layout/slider/<strong>slider.js</strong> підключені базові, мінімально необхідні для роботи стилі слайдера<strong> import \\"./slider.scss\\";</strong> (Для більш досвідчених). Також є можливість підключити (розкоментувавши рядок) повні стилі слайдера з npm пакету <strong>import ‘swiper/css’; </strong>(для початківців)</p><p>Для більш широкого використання можливостей компоненту галереї, дивіться <a href=\\"https://swiperjs.com/swiper-api\\">документацію Swiper</a> </p></div>"},{"filename":"fullpage.html","title":"Компонент \\"ФулПейдж\\"","cover":"fullpage.jpg","date":"17.04.2025","prev":"У шаблоні вбудований функціонал поекранного прокручування (скрола) сторінки. За замовченням кожна секція сторінки займає мінімум всю висоту екрану. Розташування компонент Файли компоненту знаходяться в папці src/components/layout/fullpage, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту.","content":"<div class=\\"content\\"><p>У шаблоні вбудований функціонал поекранного прокручування (скрола) сторінки. За замовченням кожна секція сторінки займає мінімум всю висоту екрану.</p><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/layout/fullpage, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту.</p><h3>Використання компоненту</h3><p>В HTML, ви можете використовувати сніпет <strong>fullpage</strong> або побудувати HTML-структуру самостійно:</p><blockquote><p>&lt;div data-fls-fullpage class=\\"some-class\\"&gt;<br>&lt;div data-fls-fullpage-section class=\\"some-class__section\\"&gt; ... &lt;/div&gt;<br>...<br>&lt;/div&gt;</p></blockquote><p><strong>Буллети</strong></p><p>Існує можливість додати кнопки перемикання секцій (буллети). Для цього до об’єкта з дата атрибутом data-fls-fullpage додати дата атрибут data-fls-fullpage-bullets</p><blockquote><p>&lt;div data-fls-fullpage data-fls-fullpage-bullets class=\\"some-class\\"&gt; <br>&lt;div data-fls-fullpage-section class=\\"some-class__section\\"&gt; ... &lt;/div&gt; <br>... <br>&lt;/div&gt;</p></blockquote><p><strong>Ефекти перемикання</strong></p><p>Для зміни ефекту перемикання, об’єкту з дата атрибутом <strong>data-fls-fullpage</strong> додати дата атрибут <strong>data-fls-fullpage-effect</strong> і як значення додати один із наступних параметрів fade, cards, slider (за замовчуванням)</p><blockquote><p>&lt;div <strong>data-fls-fullpage</strong> <strong>data-fls-fullpage-effect</strong>=\\"fade\\" class=\\"some-class\\"&gt; <br>&lt;div data-fp-section class=\\"some-class__section\\"&gt; ... &lt;/div&gt; <br>... <br>&lt;/div&gt;</p></blockquote><p>Автори Хмурий Кіт, Фрілансер по життя.</p></div>"},{"filename":"digcounter.html","title":"Компонент \\"Цифровий лічильник\\"","cover":"digcounter.jpg","date":"18.04.2025","prev":"Компонент виводить та анімує цтфрову статистику, що є дуже поширеним елементом в дизайні Розташування компоненту Файли компоненту знаходяться в папці src/components/layout/digcounter, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту. Використання компоненту В HTML, ви можете використовувати сніпет digcounter або побудувати HTML-структуру самостійно:","content":"<div class=\\"content\\"><p>Компонент виводить та анімує цтфрову статистику, що є дуже поширеним елементом в дизайні</p><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/layout/digcounter, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту.</p><h3>Використання компоненту</h3><p>В HTML, ви можете використовувати сніпет <strong>digcounter</strong> або побудувати HTML-структуру самостійно:</p><blockquote><p>&lt;div data-fls-watcher class=\\"block\\"&gt;<br>&lt;div data-fls-digcounter  class=\\"block__item\\"&gt;1500&lt;/div&gt;<br>&lt;div data-fls-digcounter  class=\\"block__item\\"&gt;500&lt;/div&gt;<br>&lt;div data-fls-digcounter  class=\\"block__item\\"&gt;800&lt;/div&gt;<br>...<br>&lt;/div&gt;</p></blockquote><p>Зверніть увагу, для запуску анімації використовується <a href=\\"observer.html\\">компонент \\"Спостерігач\\"</a>, тому до батьківського елементу лічильника доданий дата-атрибут <strong>data-fls-watcher</strong></p><h3>Додаткові можливості</h3><p><strong>Зміна швидкості</strong></p><p>Для зміни швидкості анімації необхідно додати атрибут <strong>data-fls-digcounter-speed</strong> до елементу лічильника та вказати швидкість у мілісекундах (1000 за замовченням)</p><blockquote><p>&lt;div data-fls-watcher class=\\"block\\"&gt;<br>&lt;div data-fls-digcounter data-fls-digcounter-speed=\\"500\\" class=\\"block__item\\"&gt;1500&lt;/div&gt;<br>&lt;div data-fls-digcounter data-fls-digcounter-speed=\\"200\\" class=\\"block__item\\"&gt;500&lt;/div&gt;<br>&lt;div data-fls-digcounter data-fls-digcounter-speed=\\"1700\\" class=\\"block__item\\"&gt;800&lt;/div&gt;<br>...<br>&lt;/div&gt;</p></blockquote><p><strong>Форматування</strong></p><p>Існує можливість форматування виводу цифр відділяючи тисячі сотрі тисяч і т.д. Для цього необхідно додати атрибут <strong>data-fls-digcounter-format</strong> до елементу лічильника. Для налаштування розмежувача можно додати символ у якості значення атрибуту (за замовченням пробіл)</p><blockquote><p>&lt;div data-fls-watcher class=\\"block\\"&gt;<br>&lt;div data-fls-digcounter data-fls-digcounter-format=\\".\\" class=\\"block__item\\"&gt;1500&lt;/div&gt;<br>&lt;div data-fls-digcounter data-fls-digcounter-format class=\\"block__item\\"&gt;500&lt;/div&gt;<br>&lt;div data-fls-digcounter data-fls-digcounter-format=\\",\\" class=\\"block__item\\"&gt;800&lt;/div&gt;<br>...<br>&lt;/div&gt;</p></blockquote></div>"},{"filename":"preloader.html","title":"Компонент \\"Прелоадер\\"","cover":"preloader.jpg","date":"20.04.2025","prev":"Компонент \\"Прелоадер\\" здатен відображати певну анімаю під час завантаження сторінки. Підходить для сторінок з великою кількістю зображень. Розташування компоненту Файли компоненту знаходяться в папці src/components/effects/preloader, тут ви знайдете JS-файл компоненту, HTML-файл який автоматично підключається в <head>, а також SCSS-файл для стилізації компоненту.","content":"<div class=\\"content\\"><p>Компонент \\"Прелоадер\\" здатен відображати певну анімаю під час завантаження сторінки. Підходить для сторінок з великою кількістю зображень.</p><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/effects/preloader, тут ви знайдете JS-файл компоненту, HTML-файл який автоматично підключається в &lt;head&gt;, а також SCSS-файл для стилізації компоненту.</p><h3>Використання компоненту</h3><p>В HTML-файлах сторінок, де потрібен прелоадер, налаштуйте змінні які передаються через locals в шаблон сторінки:</p><blockquote><p>...<br>\\"preloader\\": {<br>\\"enable\\":\\"true\\",<br>\\"once\\":\\"false\\"<br>},<br>...</p></blockquote><p>Де preloader-&gt;enable це вмикач компоненту, а preloader-&gt;once це вмикач лише одно показу анімації підвантаження.</p></div>"},{"filename":"cursor.html","title":"Компонент \\"Курсор\\"","cover":"cursor.jpg","date":"20.04.2025","prev":"В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (ЧФ4) є можливість використовувати власну стилізацію та анімацію курсору миші Розташування компоненту Файли компоненту знаходяться в папці src/components/effects/cursor, тут ви знайдете JS-файл компоненту а також SCSS-файл для стилізації компоненту.","content":"<div class=\\"content\\"><p>В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (ЧФ4) є можливість використовувати власну стилізацію та анімацію курсору миші</p><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/effects/cursor, тут ви знайдете JS-файл компоненту а також SCSS-файл для стилізації компоненту.</p><h3>Використання компоненту</h3><p>В HTML до об'єкту, всередені якого треба виводити стилізований курсор, додайте дата-атрибут <strong>data-fls-cursor</strong></p><blockquote><p>&lt;html data-fls-cursor&gt;</p></blockquote><p>Для додавання анімаційного елементу курсору, так званої тіні, додайте ще один атрибут <strong>data-fls-cursor-shadow</strong></p><blockquote><p>&lt;html data-fls-cursor data-fls-cursor-shadow&gt;</p></blockquote><p>Стилізуйте компонент за бажанням.</p></div>"},{"filename":"marquee.html","title":"Компонент \\"Рядок що біжить\\"","cover":"marquee.jpg","date":"21.04.2025","prev":"Дуже корисний компонент з анімацією рядка з елементами Розташування компоненту Файли компоненту знаходяться в папці src/components/effects/marquee, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту. Використання компоненту В HTML скористайтесь сніпетом mar, або побудуйте структуру з використання дата-атрибуту data-fls-marquee","content":"<div class=\\"content\\"><p>Дуже корисний компонент з анімацією рядка з елементами</p><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/effects/marquee, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту.</p><h3>Використання компоненту</h3><p>В HTML скористайтесь сніпетом mar, або побудуйте структуру з використання дата-атрибуту data-<strong>fls-marquee</strong></p><blockquote><p>&lt;div data-fls-marquee&gt;<br>&lt;div&gt;елемент один&lt;/div&gt;<br>&lt;div&gt;елемент два&lt;/div&gt;<br>...<br>&lt;/div&gt;</p></blockquote><h3>Додаткові можливості</h3><p>Для коригування відступів між елементами використовуйте дата-атрибут data-fls-marquee-space зі значенням (за замовченням значення 30px):</p><blockquote><p>&lt;div data-fls-marquee data-fls-marquee-space=\\"50\\"&gt;<br>&lt;div&gt;елемент один&lt;/div&gt;<br>&lt;div&gt;елемент два&lt;/div&gt;<br>...<br>&lt;/div&gt;</p></blockquote><p>Для коригування швидкості анімації використовуйте дата-атрибут data-fls-marquee-speed зі значенням в мілісекундах (за замовченням значення 1000ms):</p><blockquote><p>&lt;div data-fls-marquee data-fls-marquee-speed=\\"2000\\"&gt;<br>&lt;div&gt;елемент один&lt;/div&gt;<br>&lt;div&gt;елемент два&lt;/div&gt;<br>...<br>&lt;/div&gt;</p></blockquote><p>Для зупинки анімації при наведенні миші використовуйте дата-атрибут data-fls-marquee-pause:</p><blockquote><p>&lt;div data-fls-marquee data-fls-marquee-pause&gt;<br>&lt;div&gt;елемент один&lt;/div&gt;<br>&lt;div&gt;елемент два&lt;/div&gt;<br>...<br>&lt;/div&gt;</p></blockquote><p>Для зміни напрямку руху використовуйте дата-атрибут data-fls-marquee-direction та значення запрмку - left, right, top, bottom (значення за замовченням left)</p><blockquote><p>&lt;div data-fls-marquee data-fls-marquee-direction=\\"right\\"&gt;<br>&lt;div&gt;елемент один&lt;/div&gt;<br>&lt;div&gt;елемент два&lt;/div&gt;<br>...<br>&lt;/div&gt;</p></blockquote><p>При використанні data-fls-marquee-direction 'top' або 'bottom', у об'єкта має бути фіксована висота та overflow: hidden;</p></div>"},{"filename":"header.html","title":"Компонент \\"Хедер\\"","cover":"header.jpg","date":"21.04.2025","prev":"В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (ЧФ4) реалізований окремий компонент шапки сайту та його плагини Розташування компоненту Файли компоненту знаходяться в папці src/components/layout/header, тут ви знайдете JS-файл для написання логіки компоненту, HTML-файл з базовим кодом, SCSS-файл для стилізації компоненту. Також в папці src/components/layout/header/plugins присутні плагіни компоненту","content":"<div class=\\"content\\"><p>В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (ЧФ4) реалізований окремий компонент шапки сайту та його плагини</p><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/layout/header, тут ви знайдете JS-файл для написання логіки компоненту, HTML-файл з базовим кодом, SCSS-файл для стилізації компоненту.</p><p>Також в папці src/components/layout/header/plugins присутні плагіни компоненту</p><h3>Використання компоненту</h3><p>Підключіть HTML-файл компоненту на свою сторінку за допомогою &lt;include&gt; (підключено за замовченням).</p><h3>Використання плагінів</h3><p><strong>Плагін \\"Scroll\\"</strong></p><p>Дозволяє керувати класами які додаються &lt;header&gt; під час скролу. Для підключення додайте дата-атрибут data-fls-header-scroll до тега &lt;header&gt;:</p><blockquote><p>&lt;header data-fls-header data-fls-header-scroll class=\\"header\\"&gt;<br>...<br>&lt;/header&gt;</p></blockquote><p>Тепер, при скролі більше одного пікселя до шапки буде додаватись клас <strong>--header-scroll</strong></p><p>Для керування кількістю прокручених пікселів перед додаванням класу, додайте дата-атрибуту data-fls-header-scroll значення:</p><blockquote><p>&lt;header data-fls-header data-fls-header-scroll=\\"500\\" class=\\"header\\"&gt;<br>...<br>&lt;/header&gt;</p></blockquote><p>Також можна підключити функціонал \\"зникаючої\\" шапки для покращення юзабіліті сайту, для цього додайте дата-атрибут data-fls-header-scroll-show до тега &lt;header&gt;:</p><blockquote><p>&lt;header data-fls-header data-fls-header-scroll data-fls-header-scroll-show  class=\\"header\\"&gt;<br>...<br>&lt;/header&gt;</p></blockquote><p>Тепер шапка буде зникати при скролі вниз та з'являтись через 500ms паузи. Для керування паузою додайте значення дата-атрибуту data-fls-header-scroll-show:</p><blockquote><p>&lt;header data-fls-header data-fls-header-scroll data-fls-header-scroll-show=\\"1000\\" class=\\"header\\"&gt;<br>...<br>&lt;/header&gt;</p></blockquote><p>При необхідності змінити стилізацію плагіну \\"Scroll\\" використовуйте файл src/components/layout/header/plugins/scroll/scroll.scss</p></div>"},{"filename":"darklite.html","title":"Компонент \\"День/Ніч\\"","cover":"darklite.jpg","date":"22.04.2025","prev":"В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (ЧФ4) реалізований функціонал зміни стилю сайту темний / світлий, опираючись на налаштування системи користувача або за часом доби або за допомогою кнопки. Розташування компоненту Файли компоненту знаходяться в папці src/components/effects/darklite, тут ви знайдете JS-файл компоненту та SCSS-файл для стилізації","content":"<div class=\\"content\\"><p>В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (ЧФ4) реалізований функціонал зміни стилю сайту темний / світлий, опираючись на налаштування системи користувача або за часом доби або за допомогою кнопки.</p><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/effects/darklite, тут ви знайдете JS-файл компоненту та SCSS-файл для стилізації</p><h3>Використання компоненту</h3><p>Додайте на свою HTML-сторінку дата-атрибут data-fls-darklite, наприклад до тегу &lt;html&gt;:</p><blockquote><p>&lt;html data-fls-darklite&gt;</p></blockquote><p>Цього достатньо щоб компонент розпізнав налаштування системи користувача і додав відповідний дата-атрибут до тегу &lt;html&gt;: data-fls-darklite-light або data-fls-darklite-dark</p><p>Якщо ви хочете щоб атрибути стилю додавались за часом доби, додайте дата атрибут data-fls-darklite-time:</p><blockquote><p>&lt;html data-fls-darklite data-fls-darklite-time&gt;</p></blockquote><p>Тепер атрибут data-fls-darklite-dark буде додаватиз з 18 години вечора до 5 години ранку, весь інший час буде додаватись атрибут data-fls-darklite-light</p><p>Для налаштування власного проміжку в якому буде додаватись атрибут data-fls-darklite-dark, вкажіть для атрибуту data-fls-darklite-time значення через кому:</p><p>&lt;html data-fls-darklite data-fls-darklite-time=\\"13,23\\"&gt;</p><p>Тепер атрибут data-fls-darklite-dark буде додаватись у проміжку з 13 годин до 23 години</p><p>Якщо ви хочете надати користувачу можливість самостійно вмикати ту чи іншу тему сайту, додайте у ваш інтерфейс кнопку з дата-атрибутом data-fls-darklite-set:</p><blockquote><p>&lt;button data-fls-darklite-set&gt;...&lt;/button&gt;</p></blockquote><p>При натискані кнопки поточна тема змінеться на протилежну, і в браузер користувача буде збережений його вибір.</p><p>Щоб надати користувачу можливість видаляти збережений вибір теми, додайте у ваш інтерфейс кнопку з дата-атрибутом data-fls-darklite-reset:</p><blockquote><p>&lt;button data-fls-darklite-reset&gt;...&lt;/button&gt;</p></blockquote></div>"},{"filename":"cart.html","title":"Компонент \\"Кошик\\"","cover":"cart.jpg","date":"23.04.2025","prev":"В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (ЧФ4) реалізований функціонал додавання товарів в кошик, з можливістю анімації зображення товару Розташування компоненту Файли компоненту знаходяться в папці src/components/forms/addtocart, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту.","content":"<div class=\\"content\\"><p>В стартовому шаблоні \\"Чертоги Фрілансера\\" 4 (ЧФ4) реалізований функціонал додавання товарів в кошик, з можливістю анімації зображення товару</p><h3>Розташування компоненту</h3><p>Файли компоненту знаходяться в папці src/components/forms/addtocart, тут ви знайдете JS-файл компоненту, HTML-файл з прикладом коду, а також SCSS-файл для стилізації компоненту.</p><h3>Використання компоненту</h3><p>В HTML беспосередньо до об'єкту який виводить кількість товарів в кошику додайте дата-атрибут data-fls-addtocart:</p><blockquote><p>&lt;div class=\\"cart\\"&gt;<br>&lt;span class=\\"cart__quantity\\" data-fls-addtocart&gt;0&lt;/span&gt;<br>&lt;/div&gt;</p></blockquote><p>Для кнопки \\"Купити\\", \\"Додати у кошик\\" тощо додайте дата-атрибут data-fls-addtocart-button:</p><blockquote><p>&lt;button data-fls-addtocart-button&gt;Додати у кошик&lt;/button&gt;</p></blockquote><p>Для використання додаткового функціоналу, додаємо обгортку товару що додається в кошик, з дата-атрибутом data-fls-addtocart-product:</p><blockquote><p>&lt;div data-fls-addtocart-product class=\\"product\\"&gt;<br>...<br>&lt;button data-fls-addtocart-button&gt;Додати в кошик&lt;/button&gt;<br>&lt;/div&gt;</p></blockquote><p>Тепер ми маємо можливість додати керування кількістю товарів які будуть додані у кошик. Для цього необхідно додати дата-атрибут data-fls-addtocart-quantity для тегу &lt;input&gt; який керує кількістю, або використати компонент \\"Кількість\\" ЧФ4 теж з додаванням data-fls-addtocart-quantity:</p><blockquote><p>&lt;div data-fls-addtocart-product class=\\"product\\"&gt;<br>...<br>&lt;input data-fls-addtocart-quantity autocomplete=\\"off\\" type=\\"text\\" name=\\"form[]\\" value=\\"1\\"&gt;<br>&lt;button data-fls-addtocart-button&gt;Додати у кошик&lt;/button&gt;<br>&lt;/div&gt;</p></blockquote><p>Або</p><blockquote><p>&lt;div data-fls-addtocart-product class=\\"product\\"&gt;<br>...<br>&lt;div data-fls-quantity class=\\"quantity\\"&gt;<br>&lt;button data-fls-quantity-minus type=\\"button\\" class=\\"quantity__button quantity__button--minus\\"&gt;&lt;/button&gt;<br>&lt;div class=\\"quantity__input\\"&gt;<br>&lt;input data-fls-addtocart-quantity data-fls-quantity-value autocomplete=\\"off\\" type=\\"text\\" name=\\"form[]\\" value=\\"1\\"&gt;<br>&lt;/div&gt;<br>&lt;button data-fls-quantity-plus type=\\"button\\" class=\\"quantity__button quantity__button--plus\\"&gt;&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;button data-fls-addtocart-button&gt;Додати у кошик&lt;/button&gt;<br>&lt;/div&gt;</p></blockquote><p>Також, є можливість анімувати зображення товару створюючи \\"політ у кошик\\". Для цього тегу &lt;img&gt; товару додайте дата-трибут data-fls-addtocart-image:</p><blockquote><p>&lt;div data-fls-addtocart-product class=\\"product\\"&gt;<br>...<br>&lt;img src=\\"...\\" data-fls-addtocart-image alt=\\"Image\\"&gt;<br>&lt;button data-fls-addtocart-button&gt;Додати у кошик&lt;/button&gt;<br>&lt;/div&gt;</p></blockquote><p>Для керуванням швидкістю анімації додайте значення атрибуту data-fls-addtocart-image у мілісекундах (за замовченням 500ms):</p><blockquote><p>&lt;div data-fls-addtocart-product class=\\"product\\"&gt;<br>...<br>&lt;img src=\\"...\\" data-fls-addtocart-image=\\"1000\\" alt=\\"Image\\"&gt;<br>&lt;button data-fls-addtocart-button&gt;Додати у кошик&lt;/button&gt;<br>&lt;/div&gt;</p></blockquote><p></p></div>"}]`);
export {
  data as d
};
